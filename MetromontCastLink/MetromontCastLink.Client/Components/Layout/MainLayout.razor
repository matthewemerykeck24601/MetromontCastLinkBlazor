@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Shared.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IACCService ACCService

<div class="page">
    <header class="main-header">
        <div class="header-container">
            <div class="header-left">
                <div class="logo-section">
                    <div class="logo-icon">🏗️</div>
                    <div class="app-title">
                        <h1>El Diablo</h1>
                        <span class="subtitle">Manufacturing Execution System</span>
                    </div>
                </div>
            </div>
            <div class="header-right">
                <div class="user-info">
                    <span class="user-name">Matt Keck</span>
                    <span class="user-email">mkeck@metromont.com</span>
                </div>
                <div class="user-avatar">MK</div>
            </div>
        </div>
    </header>

    <main class="content-area">
        <SfToast @ref="ToastObj" Title="Notification" Icon="e-meeting">
            <ToastPosition X="Right" Y="Top" />
            <ToastAnimationSettings>
                <ToastShowAnimationSettings Effect="@ToastEffect.FadeIn" Duration="600" />
                <ToastHideAnimationSettings Effect="@ToastEffect.FadeOut" Duration="600" />
            </ToastAnimationSettings>
        </SfToast>

        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </main>
</div>

@code {
    private SfToast? ToastObj;

    public async Task ShowNotification(string message, string type = "info")
    {
        if (ToastObj != null)
        {
            var cssClass = type switch
            {
                "success" => "e-toast-success",
                "error" => "e-toast-danger",
                "warning" => "e-toast-warning",
                _ => "e-toast-info"
            };

            await ToastObj.ShowAsync(new ToastModel
            {
                Content = message,
                CssClass = cssClass,
                Timeout = 3000
            });
        }
    }
}