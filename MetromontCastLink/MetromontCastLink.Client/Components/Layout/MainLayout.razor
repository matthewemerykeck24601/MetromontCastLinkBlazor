@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Shared.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IACCService ACCService

<div class="page">
    <header class="main-header">
        <div class="header-container">
            <div class="header-left">
                <div class="logo-section" @onclick="NavigateToHome" style="cursor: pointer;">
                    <img src="/images/Metromont_100_Shield_White.png" alt="El Diablo" class="logo-icon-img">
                    <div class="app-title">
                        <h1>El Diablo</h1>
                        <span class="subtitle">Manufacturing Execution System</span>
                    </div>
                </div>
            </div>
            <div class="header-right">
                @if (IsAuthenticated && CurrentUser != null)
                {
                    <div class="user-info">
                        <span class="user-name">@CurrentUser.Name</span>
                        <span class="user-email">@CurrentUser.Email</span>
                    </div>
                    <div class="user-avatar">@GetUserInitials()</div>
                    <SfButton CssClass="e-flat e-small" @onclick="SignOut">Sign Out</SfButton>
                }
                else
                {
                    <SfButton CssClass="e-primary" @onclick="SignIn">Sign In</SfButton>
                }
            </div>
        </div>
    </header>

    <main class="main-content">
        @Body
    </main>

    <!-- Notification Toast -->
    <SfToast @ref="ToastObj" ShowCloseButton="true" Timeout="5000">
        <ToastPosition X="Right" Y="Top"></ToastPosition>
        <ToastAnimationSettings>
            <ToastShowAnimationSettings Effect="@ToastEffect.SlideRightIn" Duration="600"></ToastShowAnimationSettings>
            <ToastHideAnimationSettings Effect="@ToastEffect.SlideRightOut" Duration="600"></ToastHideAnimationSettings>
        </ToastAnimationSettings>
    </SfToast>
</div>

@code {
    private SfToast? ToastObj;
    private bool IsAuthenticated;
    private UserProfile? CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        // Check for authentication callback parameters first
        await HandleAuthCallback();

        await CheckAuthentication();

        // Subscribe to authentication state changes
        if (ACCService != null)
        {
            ACCService.AuthenticationStateChanged += OnAuthenticationStateChanged;
        }
    }

    private async Task HandleAuthCallback()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            if (query["code"] != null)
            {
                // We have an auth code, handle the callback
                if (ACCService is MetromontCastLink.Client.Services.ACCService clientService)
                {
                    await clientService.HandleCallbackAsync(query["code"]!);

                    // Remove the code from the URL to clean it up
                    var baseUri = uri.GetLeftPart(UriPartial.Path);
                    Navigation.NavigateTo(baseUri, replace: true);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling auth callback: {ex.Message}");
        }
    }

    private async Task CheckAuthentication()
    {
        try
        {
            IsAuthenticated = await ACCService.IsAuthenticatedAsync();
            if (IsAuthenticated)
            {
                CurrentUser = await ACCService.GetUserProfileAsync();
                if (CurrentUser == null)
                {
                    Console.WriteLine("User authenticated but profile could not be loaded");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking authentication: {ex.Message}");
        }
    }

    private void OnAuthenticationStateChanged(object? sender, AuthenticationStateChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await CheckAuthentication();
            StateHasChanged();
        });
    }

    private string GetUserInitials()
    {
        if (CurrentUser == null || string.IsNullOrEmpty(CurrentUser.Name))
            return "??";

        var parts = CurrentUser.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
        else if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();

        return "??";
    }

    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }

    private async Task SignIn()
    {
        try
        {
            // Go directly to ACC authentication
            await ACCService.InitiateAuthenticationAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initiating sign-in: {ex.Message}");
            if (ToastObj != null)
            {
                await ToastObj.ShowAsync(new ToastModel
                {
                    Title = "Authentication Error",
                    Content = "Failed to initiate sign-in. Please try again.",
                    CssClass = "e-toast-danger"
                });
            }
        }
    }

    private async Task SignOut()
    {
        await ACCService.SignOutAsync();
        Navigation.NavigateTo("/");
    }

    public async Task ShowToast(string title, string content, string cssClass = "e-toast-success")
    {
        if (ToastObj != null)
        {
            await ToastObj.ShowAsync(new ToastModel
            {
                Title = title,
                Content = content,
                CssClass = cssClass
            });
        }
    }

    public void Dispose()
    {
        if (ACCService != null)
        {
            ACCService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
        }
    }
}