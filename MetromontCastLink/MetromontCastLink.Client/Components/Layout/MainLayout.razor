@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Shared.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IACCService ACCService

<div class="page">
    <header class="main-header">
        <div class="header-container">
            <div class="header-left">
                <div class="logo-section">
                    <div class="logo-icon">🏗️</div>
                    <div class="app-title">
                        <h1>El Diablo</h1>
                        <span class="subtitle">Manufacturing Execution System</span>
                    </div>
                </div>
            </div>
            <div class="header-right">
                @if (IsAuthenticated && CurrentUser != null)
                {
                    <div class="user-menu" @onclick="ToggleUserMenu">
                        <div class="user-info">
                            <span class="user-name">@CurrentUser.Name</span>
                            <span class="user-email">@CurrentUser.Email</span>
                        </div>
                        <div class="user-avatar">@GetUserInitials()</div>
                    </div>
                    @if (ShowUserMenu)
                    {
                        <div class="user-dropdown">
                            <div class="dropdown-item" @onclick="GoToProfile">
                                <span class="dropdown-icon">👤</span>
                                <span>Profile</span>
                            </div>
                            <div class="dropdown-item" @onclick="GoToSettings">
                                <span class="dropdown-icon">⚙️</span>
                                <span>Settings</span>
                            </div>
                            <div class="dropdown-divider"></div>
                            <div class="dropdown-item" @onclick="SignOut">
                                <span class="dropdown-icon">🚪</span>
                                <span>Sign Out</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <SfButton CssClass="e-primary" @onclick="SignIn">
                        Sign in to ACC
                    </SfButton>
                }
            </div>
        </div>
    </header>

    <main class="content-area" @onclick="CloseUserMenu">
        <SfToast @ref="ToastObj" Title="Notification" Icon="e-meeting">
            <ToastPosition X="Right" Y="Top" />
            <ToastAnimationSettings>
                <ToastShowAnimationSettings Effect="@ToastEffect.FadeIn" Duration="600" />
                <ToastHideAnimationSettings Effect="@ToastEffect.FadeOut" Duration="600" />
            </ToastAnimationSettings>
        </SfToast>

        <CascadingValue Value="this">
            @Body
        </CascadingValue>
    </main>
    <Footer />
</div>

<style>
    .user-menu {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.5rem;
        transition: background-color 0.2s;
        position: relative;
    }

        .user-menu:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

    .user-dropdown {
        position: absolute;
        top: 100%;
        right: 0;
        margin-top: 0.5rem;
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        min-width: 200px;
        z-index: 1000;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .dropdown-item:hover {
            background-color: #f8fafc;
        }

    .dropdown-icon {
        font-size: 1.125rem;
    }

    .dropdown-divider {
        height: 1px;
        background-color: #e2e8f0;
        margin: 0.25rem 0;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 1rem;
    }
</style>

@code {
    private SfToast? ToastObj;
    private bool IsAuthenticated;
    private UserProfile? CurrentUser;
    private bool ShowUserMenu;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to authentication state changes
        ACCService.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Check initial authentication state
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        IsAuthenticated = await ACCService.IsAuthenticatedAsync();
        if (IsAuthenticated)
        {
            CurrentUser = await ACCService.GetUserProfileAsync();
        }
        StateHasChanged();
    }

    private void OnAuthenticationStateChanged(object? sender, AuthenticationStateChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await CheckAuthenticationState();
        });
    }

    private string GetUserInitials()
    {
        if (CurrentUser == null || string.IsNullOrEmpty(CurrentUser.Name))
            return "??";

        var parts = CurrentUser.Name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        else if (parts.Length == 1)
            return parts[0].Substring(0, Math.Min(2, parts[0].Length)).ToUpper();

        return "??";
    }

    private void ToggleUserMenu()
    {
        ShowUserMenu = !ShowUserMenu;
    }

    private void CloseUserMenu()
    {
        ShowUserMenu = false;
    }

    private void GoToProfile()
    {
        ShowUserMenu = false;
        Navigation.NavigateTo("/profile");
    }

    private void GoToSettings()
    {
        ShowUserMenu = false;
        Navigation.NavigateTo("/settings");
    }

    private async Task SignIn()
    {
        Navigation.NavigateTo("/signin-acc");
    }

    private async Task SignOut()
    {
        ShowUserMenu = false;
        await ACCService.SignOutAsync();
        Navigation.NavigateTo("/");
        await ShowNotification("You have been signed out", "info");
    }

    public async Task ShowNotification(string message, string type = "info")
    {
        if (ToastObj != null)
        {
            var cssClass = type switch
            {
                "success" => "e-toast-success",
                "error" => "e-toast-danger",
                "warning" => "e-toast-warning",
                _ => "e-toast-info"
            };

            await ToastObj.ShowAsync(new ToastModel
            {
                Content = message,
                CssClass = cssClass,
                Timeout = 3000
            });
        }
    }

    public void Dispose()
    {
        ACCService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}