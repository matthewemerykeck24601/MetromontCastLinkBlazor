@page "/signin-acc"
@using System.Web
@using MetromontCastLink.Shared.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject HttpClient HttpClient

<PageTitle>Sign in to Autodesk Construction Cloud</PageTitle>

<div class="signin-page">
    <div class="signin-container">
        <div class="signin-content">
            <div class="signin-header">
                <img src="/images/metromont-logo.png" alt="Metromont" class="company-logo" />
                <h2>Connect to Autodesk Construction Cloud</h2>
                <p>Sign in to access your ACC projects and data</p>
            </div>

            @if (IsLoading)
            {
                <div class="signin-loading">
                    <SfSpinner Size="40" Label="Connecting to ACC..." />
                </div>
            }
            else if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="signin-error">
                    <div class="error-icon">⚠️</div>
                    <h3>Connection Error</h3>
                    <p>@ErrorMessage</p>
                    <SfButton CssClass="e-primary" @onclick="RetrySignIn">Try Again</SfButton>
                </div>
            }
            else
            {
                <div class="signin-actions">
                    <SfButton CssClass="e-primary e-large" IconCss="e-icons e-login"
                              @onclick="SignInToACC">
                        Sign in with Autodesk ID
                    </SfButton>
                    <p class="signin-note">
                        You'll be redirected to Autodesk's secure sign-in page
                    </p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .signin-page {
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
    }

    .signin-container {
        background: white;
        border-radius: 16px;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 480px;
        width: 100%;
    }

    .signin-content {
        padding: 3rem 2rem;
        text-align: center;
    }

    .signin-header {
        margin-bottom: 2rem;
    }

    .company-logo {
        height: 60px;
        margin-bottom: 1rem;
    }

    .signin-header h2 {
        color: #1e293b;
        font-size: 1.75rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
    }

    .signin-header p {
        color: #64748b;
        font-size: 1rem;
        margin: 0;
    }

    .signin-loading {
        padding: 2rem 0;
    }

    .signin-error {
        text-align: center;
        padding: 1rem;
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .error-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .signin-error h3 {
        color: #dc2626;
        font-size: 1.125rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
    }

    .signin-error p {
        color: #7f1d1d;
        margin: 0 0 1rem 0;
    }

    .signin-actions {
        margin-top: 1rem;
    }

    .signin-note {
        color: #64748b;
        font-size: 0.875rem;
        margin-top: 1rem;
        margin-bottom: 0;
    }

    .e-btn.e-large {
        padding: 12px 24px;
        font-size: 1rem;
        min-width: 200px;
    }
</style>

@code {
    private bool IsLoading;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated
        var isAuthenticated = await ACCService.IsAuthenticatedAsync();

        if (isAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        // Check for callback parameters
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = HttpUtility.ParseQueryString(uri.Query);

        if (query["code"] != null)
        {
            await HandleAuthCallback(query["code"]!);
        }
        else if (query["error"] != null)
        {
            ErrorMessage = $"Authentication failed: {query["error_description"] ?? query["error"]}";
        }
    }

    private async Task SignInToACC()
    {
        try
        {
            IsLoading = true;
            ErrorMessage = null;
            StateHasChanged();

            await ACCService.InitiateAuthenticationAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SigninACC - Error: {ex.Message}");
            ErrorMessage = $"Failed to initiate sign-in: {ex.Message}";
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleAuthCallback(string code)
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            // Call the HandleCallbackAsync method in ACCService
            if (ACCService is MetromontCastLink.Client.Services.ACCService clientService)
            {
                await clientService.HandleCallbackAsync(code);

                // Add a small delay to ensure token is stored
                await Task.Delay(100);

                // Verify authentication was successful
                var isAuthenticated = await ACCService.IsAuthenticatedAsync();

                if (isAuthenticated)
                {
                    // Navigate to the main page or dashboard
                    Navigation.NavigateTo("/", forceLoad: true);
                }
                else
                {
                    ErrorMessage = "Authentication callback failed. Please try again.";
                }
            }
            else
            {
                ErrorMessage = "Service configuration error. Please contact support.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SigninACC - Error in HandleAuthCallback: {ex.Message}");
            ErrorMessage = $"Authentication failed: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetrySignIn()
    {
        ErrorMessage = null;
        await SignInToACC();
    }
}