@page "/signin-acc"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject IJSRuntime JSRuntime

<PageTitle>Signing in to ACC...</PageTitle>

<div class="signin-container">
    <div class="signin-card">
        @if (IsProcessing)
        {
            <div class="processing">
                <SfSpinner Size="50" Label="Authenticating with Autodesk Construction Cloud..." />
            </div>
        }
        else if (IsSuccess)
        {
            <div class="success">
                <div class="success-icon">✓</div>
                <h2>Authentication Successful!</h2>
                <p>Redirecting to the application...</p>
            </div>
        }
        else if (HasError)
        {
            <div class="error">
                <div class="error-icon">⚠️</div>
                <h2>Authentication Failed</h2>
                <p>@ErrorMessage</p>
                <SfButton CssClass="e-primary" @onclick="RetryAuth">Try Again</SfButton>
            </div>
        }
    </div>
</div>

<style>
    .signin-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .signin-card {
        background: white;
        border-radius: 12px;
        padding: 3rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        text-align: center;
        min-width: 400px;
    }

    .processing {
        padding: 2rem;
    }

    .success-icon, .error-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .success-icon {
        color: #10b981;
    }

    .error-icon {
        color: #ef4444;
    }

    .success h2, .error h2 {
        margin: 0 0 1rem 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .success {
        color: #10b981;
    }

    .error {
        color: #374151;
    }

    .error p {
        color: #6b7280;
        margin-bottom: 2rem;
    }
</style>

@code {
    private bool IsProcessing = true;
    private bool IsSuccess = false;
    private bool HasError = false;
    private string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await ProcessCallback();
    }

    private async Task ProcessCallback()
    {
        try
        {
            var uri = new Uri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("code", out var code))
            {
                // We have an authorization code, exchange it for a token
                await ACCService.HandleCallbackAsync(code);
                
                IsProcessing = false;
                IsSuccess = true;
                
                // Redirect after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else if (query.TryGetValue("error", out var error))
            {
                // Handle OAuth error
                IsProcessing = false;
                HasError = true;
                ErrorMessage = $"Authentication error: {error}";
                
                if (query.TryGetValue("error_description", out var errorDescription))
                {
                    ErrorMessage += $" - {errorDescription}";
                }
            }
            else
            {
                // No code or error, something went wrong
                IsProcessing = false;
                HasError = true;
                ErrorMessage = "Invalid callback - no authorization code received";
            }
        }
        catch (Exception ex)
        {
            IsProcessing = false;
            HasError = true;
            ErrorMessage = $"Error processing authentication: {ex.Message}";
        }
    }

    private async Task RetryAuth()
    {
        await ACCService.InitiateAuthenticationAsync();
    }
}