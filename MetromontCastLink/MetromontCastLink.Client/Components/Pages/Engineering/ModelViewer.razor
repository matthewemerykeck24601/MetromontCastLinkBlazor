@page "/engineering/viewer"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using Syncfusion.Blazor.Buttons
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IACCService ACCService

<PageTitle>3D Model Viewer - Engineering</PageTitle>

<div class="viewer-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="e-icons e-arrow-left" @onclick="NavigateBack">Back</SfButton>
                <h1>3D Model Viewer</h1>
                <span class="project-name">@ProjectName</span>
            </div>
            <div class="header-actions">
                <SfButton CssClass="e-flat" IconCss="e-icons e-fullscreen" @onclick="ToggleFullscreen">Fullscreen</SfButton>
                <SfButton CssClass="e-primary" IconCss="e-icons e-export" @onclick="ExportView">Export View</SfButton>
            </div>
        </div>
    </div>

    <div class="viewer-container">
        <!-- Forge Viewer will be initialized here -->
        <div id="forgeViewer" class="forge-viewer">
            <div class="viewer-placeholder">
                <i class="fas fa-cube fa-3x"></i>
                <h3>3D Model Viewer</h3>
                <p>Select a model from ACC to begin viewing</p>
                <SfButton CssClass="e-primary" @onclick="LoadModel">Browse Models</SfButton>
            </div>
        </div>

        <!-- Model Information Panel -->
        <div class="model-info-panel">
            <h3>Model Information</h3>
            @if (ModelLoaded)
            {
                <div class="info-section">
                    <h4>Properties</h4>
                    <div class="property-list">
                        <div class="property-item">
                            <span class="property-label">Model Name:</span>
                            <span class="property-value">@ModelName</span>
                        </div>
                        <div class="property-item">
                            <span class="property-label">Version:</span>
                            <span class="property-value">@ModelVersion</span>
                        </div>
                        <div class="property-item">
                            <span class="property-label">Last Modified:</span>
                            <span class="property-value">@LastModified</span>
                        </div>
                    </div>
                </div>

                <div class="info-section">
                    <h4>Elements</h4>
                    <div class="element-stats">
                        <div class="stat-item">
                            <span class="stat-value">@TotalElements</span>
                            <span class="stat-label">Total Elements</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-value">@SelectedElements</span>
                            <span class="stat-label">Selected</span>
                        </div>
                    </div>
                </div>

                <div class="info-section">
                    <h4>View Controls</h4>
                    <div class="view-controls">
                        <SfButton CssClass="e-flat e-small" @onclick="ResetView">Reset View</SfButton>
                        <SfButton CssClass="e-flat e-small" @onclick="ShowAll">Show All</SfButton>
                        <SfButton CssClass="e-flat e-small" @onclick="IsolateSelected">Isolate</SfButton>
                        <SfButton CssClass="e-flat e-small" @onclick="HideSelected">Hide</SfButton>
                    </div>
                </div>
            }
            else
            {
                <p class="no-model-message">No model loaded</p>
            }
        </div>
    </div>
</div>

@code {
    private string ProjectName = "No Project Selected";
    private ACCProject? CurrentProject;

    // Model Information
    private bool ModelLoaded = false;
    private string ModelName = "";
    private string ModelVersion = "v1.0";
    private string LastModified = DateTime.Now.ToString("MMM dd, yyyy");
    private int TotalElements = 0;
    private int SelectedElements = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectInfo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize Forge Viewer when component renders
            await InitializeForgeViewer();
        }
    }

    private async Task LoadProjectInfo()
    {
        try
        {
            var projectJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(projectJson))
            {
                CurrentProject = System.Text.Json.JsonSerializer.Deserialize<ACCProject>(projectJson);
                ProjectName = CurrentProject?.Name ?? "No Project Selected";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project info: {ex.Message}");
        }
    }

    private async Task InitializeForgeViewer()
    {
        // TODO: Initialize Autodesk Forge Viewer
        // This would involve:
        // 1. Loading Forge Viewer JavaScript SDK
        // 2. Getting access token from ACC service
        // 3. Initializing viewer with model URN
        await Task.CompletedTask;
    }

    private async Task LoadModel()
    {
        // Simulate loading a model
        ModelLoaded = true;
        ModelName = "Building_Structure_Rev3.rvt";
        TotalElements = 1248;
        StateHasChanged();

        // TODO: Implement actual ACC model browser and loading
        await Task.CompletedTask;
    }

    private void ToggleFullscreen()
    {
        // TODO: Implement fullscreen toggle
    }

    private void ExportView()
    {
        // TODO: Implement view export
    }

    private void ResetView()
    {
        // TODO: Reset viewer camera
    }

    private void ShowAll()
    {
        // TODO: Show all hidden elements
    }

    private void IsolateSelected()
    {
        // TODO: Isolate selected elements
    }

    private void HideSelected()
    {
        // TODO: Hide selected elements
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/engineering");
    }
}