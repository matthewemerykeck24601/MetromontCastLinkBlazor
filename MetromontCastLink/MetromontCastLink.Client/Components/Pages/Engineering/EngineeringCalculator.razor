@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.Json
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject IDataManagementService DataManagementService

<div class="design-calculator-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="fas fa-arrow-left"
                          @onclick="@(() => Navigation.NavigateTo("/engineering"))">
                    Back
                </SfButton>
                <h2>Engineering Calculator</h2>
                <span class="project-name">@(CurrentProject?.Name ?? "No Project Selected")</span>
            </div>
            <div class="header-right">
                <div class="model-selector">
                    <label>3D Model:</label>
                    <SfDropDownList TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                    @bind-Value="SelectedModelUrn"
                                    DataSource="@CloudModels"
                                    Placeholder="Select a model..."
                                    Enabled="@(!IsLoadingModels)"
                                    Width="300px">
                        <DropDownListFieldSettings Text="Name" Value="Urn" />
                        <DropDownListEvents TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                            ValueChange="@OnModelSelected" />
                    </SfDropDownList>
                    @if (IsLoadingModels)
                    {
                        <SfSpinner Size="20" />
                    }
                </div>
                <SfButton CssClass="e-primary" IconCss="fas fa-save"
                          @onclick="SaveCalculation" Disabled="@(!HasCalculationResults)">
                    Save Results
                </SfButton>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
        <!-- Forge Viewer Container -->
        <div class="viewer-container @(IsModelLoaded ? "" : "viewer-empty")">
            <div id="forgeViewer" class="forge-viewer-element"></div>

            @if (IsLoadingViewer)
            {
                <div class="viewer-loading">
                    <SfSpinner Size="40" />
                    <p>Loading 3D Model...</p>
                </div>
            }

            <!-- Viewer Controls -->
            @if (IsModelLoaded)
            {
                <div class="viewer-controls">
                    <SfButton IconCss="fas fa-home" Title="Reset View" @onclick="ResetView" />
                    <SfButton IconCss="fas fa-expand-arrows-alt" Title="Fit to View" @onclick="FitToView" />
                    <SfButton IconCss="fas fa-cube" Title="3D View" @onclick="Toggle3DView" />
                    <SfButton IconCss="fas fa-bomb" Title="Explode" @onclick="ToggleExplode" />
                    <SfButton IconCss="fas fa-cut" Title="Section" @onclick="ToggleSection" />
                    <SfButton IconCss="fas fa-ghost" Title="Ghosting" @onclick="ToggleGhosting" />
                    <SfButton IconCss="fas fa-ruler-combined" Title="Measure" @onclick="ToggleMeasure" />
                    <SfButton IconCss="fas fa-info-circle" Title="Properties" @onclick="ShowProperties" />
                    <SfButton IconCss="fas fa-search" Title="Search" @onclick="ShowSearch" />
                    <SfButton IconCss="fas fa-mouse-pointer" Title="Clear Selection" @onclick="ClearSelection" />
                </div>
            }
        </div>

        <!-- Calculation Panel -->
        <div class="calculation-panel">
            <SfTab>
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect="AnimationEffect.SlideLeft" />
                    <TabAnimationNext Effect="AnimationEffect.SlideRight" />
                </TabAnimationSettings>
                <TabItems>
                    <!-- Point Load Tab -->
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Point Loads" IconCss="fas fa-weight-hanging" />
                        </ChildContent>
                        <ContentTemplate>
                            <div class="calculation-form">
                                <h4>Point Load Calculation</h4>

                                <div class="form-section">
                                    <label>Bearing Element:</label>
                                    <div class="element-selector">
                                        <SfTextBox Value="@(BearingElement?.Name ?? "No element selected")"
                                                   Readonly="true" />
                                        <SfButton @onclick="SelectBearingElement">Select from Model</SfButton>
                                    </div>
                                </div>

                                <div class="form-section">
                                    <label>Load Magnitude (kips):</label>
                                    <SfNumericTextBox @bind-Value="LoadMagnitude" Format="n2" />
                                </div>

                                <div class="form-section">
                                    <label>Distance from Support (ft):</label>
                                    <SfNumericTextBox @bind-Value="DistanceFromSupport" Format="n2" />
                                </div>

                                <div class="form-section">
                                    <label>Beam Length (ft):</label>
                                    <SfNumericTextBox @bind-Value="BeamLength" Format="n2" />
                                </div>

                                <SfButton CssClass="e-success" @onclick="CalculatePointLoad">
                                    Calculate
                                </SfButton>

                                @if (PointLoadResults != null)
                                {
                                    <div class="calculation-results">
                                        <h5>Results:</h5>
                                        <p>Reaction A: @PointLoadResults.ReactionA.ToString("F2") kips</p>
                                        <p>Reaction B: @PointLoadResults.ReactionB.ToString("F2") kips</p>
                                        <p>Max Moment: @PointLoadResults.MaxMoment.ToString("F2") kip-ft</p>
                                        <p>Max Shear: @PointLoadResults.MaxShear.ToString("F2") kips</p>
                                    </div>
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>

                    <!-- Additional tabs would follow similar pattern -->
                </TabItems>
            </SfTab>
        </div>
    </div>
</div>

@code {
    // Service References
    private DotNetObjectReference<EngineeringCalculator>? objRef;

    // Project and Model Data
    private ACCProject? CurrentProject;
    private string? CurrentHubId;
    private List<CloudModel> CloudModels = new List<CloudModel>();
    private string? SelectedModelUrn;
    private string? CurrentModelName;

    // UI State
    private bool IsLoadingViewer = false;
    private bool IsLoadingModels = false;
    private bool IsModelLoaded = false;
    private string CurrentSelectionMode = "single";

    // JS Interop
    private DotNetObjectReference<EngineeringCalculator>? dotNetRef;
    private bool IsViewerInitialized = false;

    // Selected Elements
    private List<BIMElement> SelectedElements = new List<BIMElement>();
    private BIMElement? BearingElement;
    private List<BIMElement> ContributingElements = new List<BIMElement>();

    // Calculation Inputs
    private double LoadMagnitude = 0.0;
    private double DistanceFromSupport = 0.0;
    private double BeamLength = 0.0;

    // Calculation Results
    private PointLoadResult? PointLoadResults;
    private bool HasCalculationResults => PointLoadResults != null;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadProjectInfo();
        await LoadCloudModels();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoadingViewer = true;
            StateHasChanged();

            // Initialize empty Forge Viewer
            await InitializeEmptyViewer();

            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    private async Task LoadProjectInfo()
    {
        try
        {
            var projectJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(projectJson))
            {
                CurrentProject = JsonSerializer.Deserialize<ACCProject>(projectJson);

                // Use the HubId directly from the project if available
                if (CurrentProject != null && !string.IsNullOrEmpty(CurrentProject.HubId))
                {
                    CurrentHubId = CurrentProject.HubId;
                    Console.WriteLine($"Using hub ID from project: {CurrentHubId}");
                }
                else
                {
                    // Fallback: try to get from session storage
                    var hubIdJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedHubId");
                    if (!string.IsNullOrEmpty(hubIdJson))
                    {
                        CurrentHubId = hubIdJson.Replace("\"", ""); // Remove quotes if present
                    }
                    else if (CurrentProject != null)
                    {
                        // Try to find it from the projects list
                        CurrentHubId = await GetHubIdForProject(CurrentProject.Id);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project info: {ex.Message}");
        }
    }

    private async Task<string?> GetHubIdForProject(string projectId)
    {
        try
        {
            // Get all projects from ACC service to find the matching hub
            var allProjects = await ACCService.GetProjectsAsync();

            // Find the project and get its hub ID
            var project = allProjects.FirstOrDefault(p => p.Id == projectId);
            if (project != null && !string.IsNullOrEmpty(project.HubId))
            {
                Console.WriteLine($"Found hub {project.HubId} for project {projectId}");
                return project.HubId;
            }

            // Fallback for A360 projects
            if (projectId.StartsWith("a.") && projectId.Contains("#"))
            {
                return projectId.Split('#')[0];
            }

            Console.WriteLine($"Could not find hub ID for project {projectId}");
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting hub ID: {ex.Message}");
            return null;
        }
    }

    private async Task LoadCloudModels()
    {
        if (CurrentProject == null) return;

        IsLoadingModels = true;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Loading models for project: {CurrentProject.Id}");

            // Make sure we have the hub ID
            if (string.IsNullOrEmpty(CurrentHubId))
            {
                CurrentHubId = await GetHubIdForProject(CurrentProject.Id);
            }

            if (string.IsNullOrEmpty(CurrentHubId))
            {
                Console.WriteLine($"Could not determine hub ID for project: {CurrentProject.Id}");
                CloudModels = new List<CloudModel>();
                return;
            }

            Console.WriteLine($"Using hub ID: {CurrentHubId}, project ID: {CurrentProject.Id}");

            // Use the Data Management Service to fetch real models
            CloudModels = await DataManagementService.GetProjectModelsAsync(CurrentHubId, CurrentProject.Id);

            if (CloudModels.Count == 0)
            {
                Console.WriteLine("No Revit models found in the project");
                Console.WriteLine("Make sure you have:");
                Console.WriteLine("1. Uploaded Revit models to your ACC project");
                Console.WriteLine("2. The models have been processed/translated for viewing");
                Console.WriteLine("3. You have proper permissions to access the models");
            }
            else
            {
                Console.WriteLine($"Found {CloudModels.Count} models");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cloud models: {ex.Message}");
            CloudModels = new List<CloudModel>();
        }
        finally
        {
            IsLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task InitializeEmptyViewer()
    {
        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();
            await JSRuntime.InvokeVoidAsync("ForgeViewer.initializeEmpty", "forgeViewer", accessToken);
            IsViewerInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing viewer: {ex.Message}");
        }
    }

    private async Task OnModelSelected(ChangeEventArgs<string, CloudModel> args)
    {
        if (string.IsNullOrEmpty(args.Value)) return;

        IsLoadingViewer = true;
        StateHasChanged();

        try
        {
            SelectedModelUrn = args.Value;
            var selectedModel = CloudModels.FirstOrDefault(m => m.Urn == SelectedModelUrn);
            CurrentModelName = selectedModel?.Name ?? "";

            // Load the model in Forge Viewer
            var accessToken = await ACCService.GetAccessTokenAsync();
            var success = await JSRuntime.InvokeAsync<bool>("ForgeViewer.loadModel",
                SelectedModelUrn, accessToken);

            IsModelLoaded = success;

            if (success)
            {
                Console.WriteLine($"Model loaded successfully: {CurrentModelName}");
            }
            else
            {
                Console.WriteLine($"Failed to load model: {CurrentModelName}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading model: {ex.Message}");
            IsModelLoaded = false;
        }
        finally
        {
            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    // Viewer Control Methods
    private async Task ResetView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task FitToView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task Toggle3DView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task ToggleExplode() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleExplode");
    private async Task ToggleSection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleSection");
    private async Task ToggleGhosting() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleGhosting");
    private async Task ToggleMeasure() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleMeasure");
    private async Task ShowProperties() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showProperties");
    private async Task ShowSearch() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showSearch");
    private async Task ClearSelection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.clearSelection");

    private async Task SetSingleSelectionMode()
    {
        CurrentSelectionMode = "single";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "single");
    }

    private async Task SetMultipleSelectionMode()
    {
        CurrentSelectionMode = "multiple";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "multiple");
    }

    private async Task ToggleFullscreen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.requestFullscreen()");
    }

    private async Task RefreshViewer()
    {
        if (!string.IsNullOrEmpty(SelectedModelUrn))
        {
            await OnModelSelected(new ChangeEventArgs<string, CloudModel> { Value = SelectedModelUrn });
        }
    }

    private async Task SelectBearingElement()
    {
        // Enable single selection mode and wait for user to select
        await SetSingleSelectionMode();
        // This would be handled by JS callback when element is selected
    }

    private void CalculatePointLoad()
    {
        if (LoadMagnitude <= 0 || BeamLength <= 0)
        {
            return;
        }

        // Simple point load calculation
        var a = DistanceFromSupport;
        var b = BeamLength - a;

        PointLoadResults = new PointLoadResult
        {
            ReactionA = LoadMagnitude * b / BeamLength,
            ReactionB = LoadMagnitude * a / BeamLength,
            MaxMoment = LoadMagnitude * a * b / BeamLength,
            MaxShear = Math.Max(LoadMagnitude * b / BeamLength, LoadMagnitude * a / BeamLength)
        };

        StateHasChanged();
    }

    private async Task SaveCalculation()
    {
        // Save calculation results
        if (HasCalculationResults && CurrentProject != null)
        {
            // Implementation for saving to OSS
            Console.WriteLine("Saving calculation results...");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
        dotNetRef?.Dispose();
    }

    // Helper classes
    public class BIMElement
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public Dictionary<string, object> Properties { get; set; } = new();
    }

    public class PointLoadResult
    {
        public double ReactionA { get; set; }
        public double ReactionB { get; set; }
        public double MaxMoment { get; set; }
        public double MaxShear { get; set; }
    }
}