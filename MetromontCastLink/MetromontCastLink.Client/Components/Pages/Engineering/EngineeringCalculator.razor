@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Spinner
@using Microsoft.JSInterop
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IACCService ACCService

<PageTitle>Design Calculator - Engineering</PageTitle>

<div class="design-calculator-container @(IsFloatingMode ? "floating-mode" : "")">
    <!-- ACC-style Header -->
    <div class="acc-header">
        <div class="header-left">
            <SfButton CssClass="e-flat nav-button" IconCss="e-icons e-arrow-left" @onclick="NavigateBack">
                <span class="button-text">Back to Engineering Hub</span>
            </SfButton>
            <div class="header-divider"></div>
            <h1 class="page-title">Design Calculator</h1>
            @if (!string.IsNullOrEmpty(CurrentProject?.Name))
            {
                <div class="project-breadcrumb">
                    <span class="breadcrumb-separator">/</span>
                    <span class="project-name">@CurrentProject.Name</span>
                    @if (!string.IsNullOrEmpty(CurrentModelName))
                    {
                        <span class="breadcrumb-separator">/</span>
                        <span class="model-name">@CurrentModelName</span>
                    }
                </div>
            }
        </div>
        <div class="header-right">
            <!-- Model Selection Dropdown -->
            <div class="model-selector">
                <SfDropDownList TValue="string" TItem="CloudModel"
                                @bind-Value="@SelectedModelUrn"
                                DataSource="@CloudModels"
                                Placeholder="Select Cloud Model"
                                CssClass="model-dropdown"
                                Enabled="@(!IsLoadingModels)"
                                Width="300px">
                    <DropDownListFieldSettings Text="Name" Value="Urn"></DropDownListFieldSettings>
                    <DropDownListEvents TValue="string" TItem="CloudModel"
                                        ValueChange="@OnModelSelected"></DropDownListEvents>
                    <DropDownListTemplates TItem="CloudModel">
                        <ItemTemplate>
                            <div class="model-item">
                                <i class="fas fa-cube model-icon"></i>
                                <div class="model-details">
                                    <span class="model-name">@context.Name</span>
                                    <span class="model-info">@context.LastModified.ToString("MMM dd, yyyy")</span>
                                </div>
                            </div>
                        </ItemTemplate>
                    </DropDownListTemplates>
                </SfDropDownList>
                @if (IsLoadingModels)
                {
                    <div class="loading-indicator">
                        <SfSpinner Size="20" />
                    </div>
                }
            </div>

            <!-- View Controls -->
            <div class="view-controls-group">
                <SfButton CssClass="e-flat view-control" IconCss="fas fa-expand"
                          @onclick="ToggleFloatingMode" Title="@(IsFloatingMode ? "Dock Calculator" : "Float Calculator")">
                </SfButton>
                <SfButton CssClass="e-flat view-control" IconCss="fas fa-redo"
                          @onclick="RefreshViewer" Title="Refresh Viewer">
                </SfButton>
                <SfButton CssClass="e-primary save-button" IconCss="fas fa-save"
                          @onclick="SaveCalculation" Disabled="@(!HasCalculationResults)">
                    Save Results
                </SfButton>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
        <!-- Forge Viewer Section -->
        <div class="viewer-section">
            <div id="forgeViewer" class="forge-viewer-container">
                @if (IsLoadingViewer)
                {
                    <div class="viewer-loading-state">
                        <SfSpinner Size="50" Label="Initializing 3D Viewer..." />
                    </div>
                }
            </div>

            <!-- ACC-style Viewer Toolbar -->
            <div class="viewer-toolbar">
                <div class="toolbar-group">
                    <span class="toolbar-label">Navigation</span>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-home"
                              @onclick="ResetView" Title="Home View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-arrows-alt"
                              @onclick="FitToView" Title="Fit to View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-cube"
                              @onclick="Toggle3DView" Title="3D View" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-divider"></div>

                <div class="toolbar-group">
                    <span class="toolbar-label">Display</span>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-expand-arrows-alt"
                              @onclick="ToggleExplode" Title="Explode View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-cut"
                              @onclick="ToggleSection" Title="Section Box" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-eye-slash"
                              @onclick="ToggleGhosting" Title="Ghost Hidden" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-divider"></div>

                <div class="toolbar-group">
                    <span class="toolbar-label">Tools</span>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-ruler"
                              @onclick="ToggleMeasure" Title="Measure" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-info-circle"
                              @onclick="ShowProperties" Title="Properties" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-search"
                              @onclick="ShowSearch" Title="Search" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-divider"></div>

                <div class="toolbar-group">
                    <span class="toolbar-label">Selection</span>
                    <SfButton CssClass="@GetSelectionButtonClass("single")"
                              @onclick="SetSingleSelectionMode" Title="Single Selection" Disabled="@(!IsModelLoaded)">
                        <i class="fas fa-mouse-pointer"></i>
                    </SfButton>
                    <SfButton CssClass="@GetSelectionButtonClass("multiple")"
                              @onclick="SetMultipleSelectionMode" Title="Multiple Selection" Disabled="@(!IsModelLoaded)">
                        <i class="fas fa-object-group"></i>
                    </SfButton>
                    <SfButton CssClass="e-flat toolbar-btn" IconCss="fas fa-times-circle"
                              @onclick="ClearSelection" Title="Clear Selection" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-spacer"></div>

                <div class="toolbar-group">
                    <span class="selection-count">@SelectedElements.Count selected</span>
                </div>
            </div>
        </div>

        <!-- Calculator Panel (Floating or Docked) -->
        <div class="@GetCalculatorClass()" @ref="calculatorPanel">
            @if (IsFloatingMode)
            {
                <!-- Draggable Header for Floating Mode -->
                <div class="calculator-drag-handle" @onmousedown="StartDrag">
                    <span class="drag-title">Design Calculator</span>
                    <div class="drag-controls">
                        <SfButton CssClass="e-flat minimize-btn" IconCss="fas fa-minus"
                                  @onclick="MinimizeCalculator"></SfButton>
                        <SfButton CssClass="e-flat dock-btn" IconCss="fas fa-compress"
                                  @onclick="ToggleFloatingMode"></SfButton>
                    </div>
                </div>
            }

            <div class="calculator-content @(IsMinimized ? "minimized" : "")">
                <!-- Calculation Tabs -->
                <SfTab CssClass="calculator-tabs" @bind-SelectedItem="@SelectedTabIndex">
                    <TabItems>
                        <TabItem>
                            <HeaderTemplate>Point Loads</HeaderTemplate>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>Point Load Calculations</h3>

                                    <!-- Selected Elements -->
                                    <div class="selected-elements-section">
                                        <label>Selected Bearing Element:</label>
                                        <div class="element-selector">
                                            @if (BearingElement != null)
                                            {
                                                <div class="selected-element">
                                                    <span>@BearingElement.Name</span>
                                                    <SfButton CssClass="e-flat remove-btn" IconCss="e-icons e-close"
                                                              @onclick="() => RemoveBearingElement()"></SfButton>
                                                </div>
                                            }
                                            else
                                            {
                                                <SfButton CssClass="e-outline select-btn" @onclick="SelectBearingElement">
                                                    Click to Select from Model
                                                </SfButton>
                                            }
                                        </div>
                                    </div>

                                    <div class="selected-elements-section">
                                        <label>Contributing Elements:</label>
                                        <div class="element-selector">
                                            @if (ContributingElements.Any())
                                            {
                                                @foreach (var element in ContributingElements)
                                                {
                                                    <div class="selected-element">
                                                        <span>@element.Name</span>
                                                        <SfButton CssClass="e-flat remove-btn" IconCss="e-icons e-close"
                                                                  @onclick="() => RemoveContributingElement(element)"></SfButton>
                                                    </div>
                                                }
                                            }
                                            <SfButton CssClass="e-outline select-btn" @onclick="SelectContributingElements">
                                                Click to Select from Model
                                            </SfButton>
                                        </div>
                                    </div>

                                    <!-- Input Fields -->
                                    <div class="input-group">
                                        <label>Load Magnitude (kips):</label>
                                        <SfNumericTextBox @bind-Value="@LoadMagnitude" Format="n2" Min="0" />
                                    </div>

                                    <div class="input-group">
                                        <label>Distance from Support (ft):</label>
                                        <SfNumericTextBox @bind-Value="@DistanceFromSupport" Format="n2" Min="0" />
                                    </div>

                                    <div class="input-group">
                                        <label>Beam Length (ft):</label>
                                        <SfNumericTextBox @bind-Value="@BeamLength" Format="n2" Min="0" />
                                    </div>

                                    <!-- Calculate Button -->
                                    <div class="calculation-actions">
                                        <SfButton CssClass="e-primary calculate-btn" @onclick="CalculatePointLoads">
                                            Calculate
                                        </SfButton>
                                    </div>

                                    <!-- Results Display -->
                                    @if (PointLoadResults != null)
                                    {
                                        <div class="results-panel">
                                            <h4>Calculation Results</h4>
                                            <div class="result-item">
                                                <span class="result-label">Reaction at Support A:</span>
                                                <span class="result-value">@PointLoadResults.ReactionA.ToString("F2") kips</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Reaction at Support B:</span>
                                                <span class="result-value">@PointLoadResults.ReactionB.ToString("F2") kips</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Maximum Moment:</span>
                                                <span class="result-value">@PointLoadResults.MaxMoment.ToString("F2") kip-ft</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Maximum Shear:</span>
                                                <span class="result-value">@PointLoadResults.MaxShear.ToString("F2") kips</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <HeaderTemplate>Columns</HeaderTemplate>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>Column Design</h3>
                                    <p>Column design calculations per PCI standards...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <HeaderTemplate>Double Tees</HeaderTemplate>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>Double Tee Design</h3>
                                    <p>Double tee calculations...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <HeaderTemplate>Flat Slabs</HeaderTemplate>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>Flat Slab Design</h3>
                                    <p>Flat slab calculations...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <HeaderTemplate>H-Frame</HeaderTemplate>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>H-Frame Design</h3>
                                    <p>H-Frame calculations...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </div>
    </div>
</div>

@code {
    // Project and Model Management
    private ACCProject? CurrentProject;
    private string SelectedModelUrn = string.Empty;
    private string CurrentModelName = string.Empty;
    private List<CloudModel> CloudModels = new List<CloudModel>();
    private bool IsLoadingModels = false;
    private bool IsLoadingViewer = false;
    private bool IsModelLoaded = false;

    // UI State
    private bool IsFloatingMode = false;
    private bool IsMinimized = false;
    private string CurrentSelectionMode = "single";
    private int SelectedTabIndex = 0;
    private ElementReference calculatorPanel;

    // Viewer State
    private DotNetObjectReference<EngineeringCalculator>? objRef;
    private bool IsViewerInitialized = false;

    // Selected Elements
    private List<BIMElement> SelectedElements = new List<BIMElement>();
    private BIMElement? BearingElement;
    private List<BIMElement> ContributingElements = new List<BIMElement>();

    // Calculation Inputs
    private double LoadMagnitude = 0.0;
    private double DistanceFromSupport = 0.0;
    private double BeamLength = 0.0;

    // Calculation Results
    private PointLoadResult? PointLoadResults;
    private bool HasCalculationResults => PointLoadResults != null;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadProjectInfo();
        await LoadCloudModels();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoadingViewer = true;
            StateHasChanged();

            // Initialize empty Forge Viewer
            await InitializeEmptyViewer();

            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    private async Task LoadProjectInfo()
    {
        try
        {
            var projectJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(projectJson))
            {
                CurrentProject = JsonSerializer.Deserialize<ACCProject>(projectJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project info: {ex.Message}");
        }
    }

    private async Task LoadCloudModels()
    {
        if (CurrentProject == null) return;

        IsLoadingModels = true;
        StateHasChanged();

        try
        {
            // For now, provide empty list since we don't have Data Management API implemented yet
            // TODO: Implement actual Data Management API to fetch models
            CloudModels = new List<CloudModel>();

            // When you have real models in your ACC project, you'll need to implement
            // the Data Management API calls here to fetch them

            Console.WriteLine($"Project selected: {CurrentProject.Name}");
            Console.WriteLine("Data Management API not yet implemented - no models loaded");
            Console.WriteLine("To load models, you need to:");
            Console.WriteLine("1. Implement Data Management API service");
            Console.WriteLine("2. Fetch folders and files from ACC project");
            Console.WriteLine("3. Filter for Revit models and get their URNs");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cloud models: {ex.Message}");
            CloudModels = new List<CloudModel>();
        }
        finally
        {
            IsLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task InitializeEmptyViewer()
    {
        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();

            // Initialize empty viewer
            await JSRuntime.InvokeVoidAsync("ForgeViewer.initializeEmpty",
                "forgeViewer",
                accessToken,
                objRef);

            IsViewerInitialized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing viewer: {ex.Message}");
        }
    }

    private async Task OnModelSelected(ChangeEventArgs<string, CloudModel> args)
    {
        if (string.IsNullOrEmpty(args.Value) || !IsViewerInitialized) return;

        IsLoadingViewer = true;
        StateHasChanged();

        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();

            // Load the selected model
            await JSRuntime.InvokeVoidAsync("ForgeViewer.loadModel",
                args.Value,
                accessToken);

            var model = CloudModels.FirstOrDefault(m => m.Urn == args.Value);
            CurrentModelName = model?.Name ?? "";
            IsModelLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading model: {ex.Message}");
        }
        finally
        {
            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    // Viewer Control Methods
    private async Task ResetView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task FitToView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task Toggle3DView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task ToggleExplode() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleExplode");
    private async Task ToggleSection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleSection");
    private async Task ToggleGhosting() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleGhosting");
    private async Task ToggleMeasure() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleMeasure");
    private async Task ShowProperties() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showProperties");
    private async Task ShowSearch() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showSearch");
    private async Task ClearSelection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.clearSelection");

    // Selection mode helper methods
    private async Task SetSingleSelectionMode()
    {
        CurrentSelectionMode = "single";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "single");
    }

    private async Task SetMultipleSelectionMode()
    {
        CurrentSelectionMode = "multiple";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "multiple");
    }

    private async Task SetSelectionMode(string mode)
    {
        CurrentSelectionMode = mode;
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", mode);
    }

    private async Task RefreshViewer()
    {
        if (!string.IsNullOrEmpty(SelectedModelUrn))
        {
            await OnModelSelected(new ChangeEventArgs<string, CloudModel> { Value = SelectedModelUrn });
        }
    }

    // Element Selection Callbacks
    [JSInvokable]
    public void OnModelLoaded(string modelName)
    {
        Console.WriteLine($"Model loaded: {modelName}");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnElementSelected(string elementJson)
    {
        try
        {
            var element = JsonSerializer.Deserialize<BIMElement>(elementJson);
            if (element != null)
            {
                SelectedElements.Clear();
                SelectedElements.Add(element);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing selected element: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnMultipleElementsSelected(string elementsJson)
    {
        try
        {
            var elements = JsonSerializer.Deserialize<List<BIMElement>>(elementsJson);
            if (elements != null)
            {
                SelectedElements = elements;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing selected elements: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnSelectionCleared()
    {
        SelectedElements.Clear();
        StateHasChanged();
    }

    [JSInvokable]
    public void OnModelStatisticsReady(int elementCount)
    {
        Console.WriteLine($"Model contains {elementCount} elements");
    }

    // Element Selection for Calculations
    private async Task SelectBearingElement()
    {
        await SetSelectionMode("single");
        // Wait for user selection
        // The OnElementSelected callback will handle the selection
    }

    private async Task SelectContributingElements()
    {
        await SetSelectionMode("multiple");
        // Wait for user selection
        // The OnMultipleElementsSelected callback will handle the selection
    }

    private void RemoveBearingElement()
    {
        BearingElement = null;
    }

    private void RemoveContributingElement(BIMElement element)
    {
        ContributingElements.Remove(element);
    }

    // Calculation Methods
    private async Task CalculatePointLoads()
    {
        if (LoadMagnitude <= 0 || BeamLength <= 0) return;

        // Perform point load calculations
        var reactionA = LoadMagnitude * (BeamLength - DistanceFromSupport) / BeamLength;
        var reactionB = LoadMagnitude * DistanceFromSupport / BeamLength;
        var maxMoment = LoadMagnitude * DistanceFromSupport * (BeamLength - DistanceFromSupport) / BeamLength;
        var maxShear = Math.Max(reactionA, reactionB);

        PointLoadResults = new PointLoadResult
        {
            ReactionA = reactionA,
            ReactionB = reactionB,
            MaxMoment = maxMoment,
            MaxShear = maxShear
        };

        StateHasChanged();
    }

    private async Task SaveCalculation()
    {
        // Save calculation results to ACC OSS
        // Implementation would go here
    }

    // UI Helper Methods
    private void ToggleFloatingMode()
    {
        IsFloatingMode = !IsFloatingMode;
    }

    private void MinimizeCalculator()
    {
        IsMinimized = !IsMinimized;
    }

    private void StartDrag(MouseEventArgs e)
    {
        // Implement drag functionality for floating calculator
        // This would require JavaScript interop for proper dragging
    }

    private string GetCalculatorClass()
    {
        return IsFloatingMode ? "calculator-panel floating" : "calculator-panel docked";
    }

    private string GetSelectionButtonClass(string mode)
    {
        return CurrentSelectionMode == mode ? "e-primary toolbar-btn active" : "e-flat toolbar-btn";
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/engineering");
    }

    public void Dispose()
    {
        objRef?.Dispose();
        JSRuntime.InvokeVoidAsync("ForgeViewer.destroy");
    }

    // Models
    public class CloudModel
    {
        public string Urn { get; set; } = "";
        public string Name { get; set; } = "";
        public DateTime LastModified { get; set; }
        public string Version { get; set; } = "";
        public string Type { get; set; } = "";
        public string MimeType { get; set; } = "";
    }

    public class BIMElement
    {
        public int Id { get; set; }
        public string ExternalId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public string Family { get; set; } = "";
        public string Type { get; set; } = "";
        public string Level { get; set; } = "";
        public string Mark { get; set; } = "";
        public double Length { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Volume { get; set; }
        public double Area { get; set; }
        public double Weight { get; set; }
    }

    public class PointLoadResult
    {
        public double ReactionA { get; set; }
        public double ReactionB { get; set; }
        public double MaxMoment { get; set; }
        public double MaxShear { get; set; }
    }
}