@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.Json
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject IDataManagementService DataManagementService

<div class="design-calculator-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="fas fa-arrow-left"
                          @onclick="@(() => Navigation.NavigateTo("/engineering"))">
                    Back
                </SfButton>
                <h2>Engineering Calculator</h2>
                <span class="project-name">@(CurrentProject?.Name ?? "No Project Selected")</span>
            </div>
            <div class="header-right">
                <div class="model-selector">
                    <label>3D Model:</label>
                    <SfDropDownList TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                    @bind-Value="SelectedModelUrn"
                                    DataSource="@CloudModels"
                                    Placeholder="Select a model..."
                                    Enabled="@(!IsLoadingModels)"
                                    Width="300px">
                        <DropDownListFieldSettings Text="Name" Value="Urn" />
                        <DropDownListEvents TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                            ValueChange="@OnModelSelected" />
                    </SfDropDownList>
                    @if (IsLoadingModels)
                    {
                        <SfSpinner Size="20" />
                    }
                </div>
                <SfButton CssClass="e-primary" IconCss="fas fa-save"
                          @onclick="SaveCalculation" Disabled="@(!HasCalculationResults)">
                    Save Results
                </SfButton>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
        <!-- Forge Viewer Section -->
        <div class="viewer-section">
            <div id="forgeViewer" class="forge-viewer-container">
                @if (IsLoadingViewer)
                {
                    <div class="viewer-loading-state">
                        <SfSpinner Size="50" Label="Initializing 3D Viewer..." />
                    </div>
                }
                @if (!IsModelLoaded && !IsLoadingViewer && IsViewerInitialized)
                {
                    <div class="viewer-loading-state">
                        <i class="fas fa-cube fa-3x"></i>
                        <h3>No Model Loaded</h3>
                        <p>Select a model from the dropdown above to begin</p>
                    </div>
                }
            </div>

            <!-- Viewer Toolbar -->
            <div class="viewer-toolbar">
                <div class="toolbar-group">
                    <span class="toolbar-label">Navigation</span>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-home"
                              @onclick="ResetView" Title="Home View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-arrows-alt"
                              @onclick="FitToView" Title="Fit to View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-cube"
                              @onclick="Toggle3DView" Title="3D View" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-divider"></div>

                <div class="toolbar-group">
                    <span class="toolbar-label">Tools</span>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-expand-arrows-alt"
                              @onclick="ToggleExplode" Title="Explode View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-cut"
                              @onclick="ToggleSection" Title="Section View" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-ghost"
                              @onclick="ToggleGhosting" Title="Ghost Elements" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-ruler"
                              @onclick="ToggleMeasure" Title="Measure" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-divider"></div>

                <div class="toolbar-group">
                    <span class="toolbar-label">Selection</span>
                    <SfButton CssClass="@($"toolbar-btn {(CurrentSelectionMode == "single" ? "active" : "")}")"
                              IconCss="fas fa-mouse-pointer"
                              @onclick="SetSingleSelectionMode" Title="Single Selection" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="@($"toolbar-btn {(CurrentSelectionMode == "multiple" ? "active" : "")}")"
                              IconCss="fas fa-object-group"
                              @onclick="SetMultipleSelectionMode" Title="Multiple Selection" Disabled="@(!IsModelLoaded)"></SfButton>
                    <SfButton CssClass="toolbar-btn" IconCss="fas fa-times"
                              @onclick="ClearSelection" Title="Clear Selection" Disabled="@(!IsModelLoaded)"></SfButton>
                </div>

                <div class="toolbar-spacer"></div>

                <div class="toolbar-group">
                    <span class="selection-count">@SelectedElements.Count selected</span>
                </div>
            </div>
        </div>

        <!-- Calculator Section -->
        <div class="@($"calculator-panel {(IsCalculatorDocked ? "docked" : "floating")}")">
            @if (!IsCalculatorDocked)
            {
                <!-- Draggable Header for Floating Mode -->
                <div class="calculator-drag-handle">
                    <span class="drag-title">Design Calculator</span>
                    <div class="drag-controls">
                        <SfButton CssClass="minimize-btn" IconCss="fas fa-minus"
                                  @onclick="() => IsMinimized = !IsMinimized"></SfButton>
                        <SfButton CssClass="dock-btn" IconCss="fas fa-compress"
                                  @onclick="() => IsCalculatorDocked = true"></SfButton>
                    </div>
                </div>
            }

            <div class="calculator-content @(IsMinimized ? "minimized" : "")">
                <!-- Calculation Type Tabs -->
                <SfTab @bind-SelectedItem="ActiveTab" CssClass="calculator-tabs">
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Point Loads" IconCss="fas fa-weight" />
                            </ChildContent>
                            <ContentTemplate>
                                <div class="calculation-panel">
                                    <h3>Point Load Transfer</h3>

                                    <!-- Element Selection -->
                                    <div class="selected-elements-section">
                                        <label>Bearing Element</label>
                                        <div class="element-selector">
                                            <SfTextBox Value="@(BearingElement?.Name ?? "Click to select from model")"
                                                       Readonly="true" />
                                            <SfButton CssClass="select-btn" IconCss="fas fa-crosshairs"
                                                      @onclick="SelectBearingElement" Disabled="@(!IsModelLoaded)">
                                                Select from Model
                                            </SfButton>
                                        </div>
                                    </div>

                                    <!-- Load Parameters -->
                                    <div class="input-group">
                                        <label>Load Magnitude (kips)</label>
                                        <SfNumericTextBox TValue="double" @bind-Value="LoadMagnitude"
                                                          Min="0" Step="0.5" Format="n2" />
                                    </div>

                                    <div class="input-group">
                                        <label>Distance from Support (ft)</label>
                                        <SfNumericTextBox TValue="double" @bind-Value="DistanceFromSupport"
                                                          Min="0" Step="0.5" Format="n2" />
                                    </div>

                                    <div class="input-group">
                                        <label>Beam Length (ft)</label>
                                        <SfNumericTextBox TValue="double" @bind-Value="BeamLength"
                                                          Min="0" Step="0.5" Format="n2" />
                                    </div>

                                    <!-- Calculate Button -->
                                    <div class="calculation-actions">
                                        <SfButton CssClass="calculate-btn"
                                                  @onclick="CalculatePointLoad"
                                                  Disabled="@(BearingElement == null || LoadMagnitude <= 0 || BeamLength <= 0)">
                                            <i class="fas fa-calculator"></i> Calculate
                                        </SfButton>
                                    </div>

                                    <!-- Results -->
                                    @if (PointLoadResults != null)
                                    {
                                        <div class="results-panel">
                                            <h4>Results</h4>
                                            <div class="result-item">
                                                <span class="result-label">Reaction at A:</span>
                                                <span class="result-value">@PointLoadResults.ReactionA.ToString("F2") kips</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Reaction at B:</span>
                                                <span class="result-value">@PointLoadResults.ReactionB.ToString("F2") kips</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Max Moment:</span>
                                                <span class="result-value">@PointLoadResults.MaxMoment.ToString("F2") kip-ft</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Max Shear:</span>
                                                <span class="result-value">@PointLoadResults.MaxShear.ToString("F2") kips</span>
                                            </div>

                                            @if (PointLoadResults.Warnings.Any())
                                            {
                                                <div class="error-message">
                                                    @foreach (var warning in PointLoadResults.Warnings)
                                                    {
                                                        <div>
                                                            <i class="fas fa-exclamation-triangle"></i> @warning
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Columns" IconCss="fas fa-columns" />
                            </ChildContent>
                            <ContentTemplate>
                                <div class="calculation-content">
                                    <h4>Prestressed Column Design</h4>
                                    <p>Column design calculations per PCI standards...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Walls/Panels" IconCss="fas fa-border-all" />
                            </ChildContent>
                            <ContentTemplate>
                                <div class="calculation-content">
                                    <h4>Wall Panel Design</h4>
                                    <p>Wall panel lateral load design...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Beams/Spandrels" IconCss="fas fa-minus" />
                            </ChildContent>
                            <ContentTemplate>
                                <div class="calculation-content">
                                    <h4>Beam Design</h4>
                                    <p>Prestressed beam design with losses...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Double Tees" IconCss="fas fa-th-large" />
                            </ChildContent>
                            <ContentTemplate>
                                <div class="calculation-content">
                                    <h4>Double Tee Design</h4>
                                    <p>DT capacity and shear calculations...</p>
                                </div>
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
        </div>
    </div>
</div>

@code {
    // Project and Model Properties
    private ACCProject? CurrentProject;
    private List<MetromontCastLink.Client.Services.CloudModel> CloudModels = new List<MetromontCastLink.Client.Services.CloudModel>();
    private string SelectedModelUrn = "";
    private string CurrentModelName = "";
    private bool IsLoadingModels = false;
    private bool IsLoadingViewer = false;
    private bool IsModelLoaded = false;

    // UI State
    private int ActiveTab = 0;
    private bool IsCalculatorDocked = true;
    private bool IsMinimized = false;
    private string CurrentSelectionMode = "single";

    // JS Interop
    private DotNetObjectReference<EngineeringCalculator>? objRef;
    private bool IsViewerInitialized = false;

    // Selected Elements
    private List<BIMElement> SelectedElements = new List<BIMElement>();
    private BIMElement? BearingElement;
    private List<BIMElement> ContributingElements = new List<BIMElement>();

    // Calculation Inputs
    private double LoadMagnitude = 0.0;
    private double DistanceFromSupport = 0.0;
    private double BeamLength = 0.0;

    // Calculation Results
    private PointLoadResult? PointLoadResults;
    private bool HasCalculationResults => PointLoadResults != null;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadProjectInfo();
        await LoadCloudModels();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoadingViewer = true;
            StateHasChanged();

            // Initialize empty Forge Viewer
            await InitializeEmptyViewer();

            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    private async Task LoadProjectInfo()
    {
        try
        {
            var projectJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(projectJson))
            {
                CurrentProject = JsonSerializer.Deserialize<ACCProject>(projectJson);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project info: {ex.Message}");
        }
    }

    private async Task LoadCloudModels()
    {
        if (CurrentProject == null) return;

        IsLoadingModels = true;
        StateHasChanged();

        try
        {
            // Extract hub ID from project ID
            // ACC project IDs are in format: b.{hubId}.{projectGuid}
            var hubId = ExtractHubId(CurrentProject.Id);

            if (string.IsNullOrEmpty(hubId))
            {
                Console.WriteLine($"Could not extract hub ID from project ID: {CurrentProject.Id}");
                CloudModels = new List<CloudModel>();
                return;
            }

            Console.WriteLine($"Loading models for hub: {hubId}, project: {CurrentProject.Id}");

            // Use the Data Management Service to fetch real models
            CloudModels = await DataManagementService.GetProjectModelsAsync(hubId, CurrentProject.Id);

            if (CloudModels.Count == 0)
            {
                Console.WriteLine("No Revit models found in the project");
                Console.WriteLine("Make sure you have:");
                Console.WriteLine("1. Uploaded Revit models to your ACC project");
                Console.WriteLine("2. The models have been processed/translated for viewing");
                Console.WriteLine("3. You have proper permissions to access the models");
            }
            else
            {
                Console.WriteLine($"Successfully loaded {CloudModels.Count} models");
                foreach (var model in CloudModels)
                {
                    Console.WriteLine($"  - {model.Name} (URN: {model.Urn})");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cloud models: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            CloudModels = new List<CloudModel>();
        }
        finally
        {
            IsLoadingModels = false;
            StateHasChanged();
        }
    }

    private string ExtractHubId(string projectId)
    {
        // ACC project IDs are in format: b.{projectGuid}
        // But the hub ID needs to be extracted from the projects list
        // For ACC/BIM360, hub IDs are typically: b.{accountId}

        // Since we can't extract hub ID from project ID alone,
        // we need to get it from the project data
        // The hub ID should have been stored when the project was selected

        // For now, return the project ID as-is since ACC expects it in some endpoints
        return projectId;
    }

    private async Task InitializeEmptyViewer()
    {
        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();

            // Initialize empty viewer
            await JSRuntime.InvokeVoidAsync("ForgeViewer.initializeEmpty",
                "forgeViewer",
                accessToken,
                objRef);

            IsViewerInitialized = true;
            Console.WriteLine("Forge Viewer initialized successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing viewer: {ex.Message}");
        }
    }

    private async Task OnModelSelected(ChangeEventArgs<string, MetromontCastLink.Client.Services.CloudModel> args)
    {
        if (string.IsNullOrEmpty(args.Value) || !IsViewerInitialized) return;

        IsLoadingViewer = true;
        StateHasChanged();

        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();

            Console.WriteLine($"Loading model with URN: {args.Value}");

            // Load the selected model
            await JSRuntime.InvokeVoidAsync("ForgeViewer.loadModel",
                args.Value,
                accessToken);

            var model = CloudModels.FirstOrDefault(m => m.Urn == args.Value);
            CurrentModelName = model?.Name ?? "";
            IsModelLoaded = true;

            Console.WriteLine($"Model loaded successfully: {CurrentModelName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading model: {ex.Message}");
            IsModelLoaded = false;
        }
        finally
        {
            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    // Viewer Control Methods
    private async Task ResetView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task FitToView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task Toggle3DView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task ToggleExplode() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleExplode");
    private async Task ToggleSection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleSection");
    private async Task ToggleGhosting() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleGhosting");
    private async Task ToggleMeasure() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleMeasure");
    private async Task ShowProperties() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showProperties");
    private async Task ShowSearch() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showSearch");
    private async Task ClearSelection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.clearSelection");

    private async Task SetSingleSelectionMode()
    {
        CurrentSelectionMode = "single";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "single");
    }

    private async Task SetMultipleSelectionMode()
    {
        CurrentSelectionMode = "multiple";
        await JSRuntime.InvokeVoidAsync("ForgeViewer.enableSelection", "multiple");
    }

    private async Task ToggleFullscreen()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.requestFullscreen()");
    }

    private async Task RefreshViewer()
    {
        if (!string.IsNullOrEmpty(SelectedModelUrn))
        {
            await OnModelSelected(new ChangeEventArgs<string, CloudModel> { Value = SelectedModelUrn });
        }
    }

    private async Task SelectBearingElement()
    {
        // Enable single selection mode and wait for user to select
        await SetSingleSelectionMode();
        // This would be handled by JS callback when element is selected
    }

    private void CalculatePointLoad()
    {
        if (BearingElement == null || LoadMagnitude <= 0 || BeamLength <= 0) return;

        // Simple point load calculation
        var a = DistanceFromSupport;
        var b = BeamLength - a;

        PointLoadResults = new PointLoadResult
        {
            ReactionA = LoadMagnitude * b / BeamLength,
            ReactionB = LoadMagnitude * a / BeamLength,
            MaxMoment = LoadMagnitude * a * b / BeamLength,
            MaxShear = Math.Max(PointLoadResults?.ReactionA ?? 0, PointLoadResults?.ReactionB ?? 0),
            Warnings = new List<string>()
        };

        // Add warnings if needed
        if (DistanceFromSupport < BeamLength * 0.1)
        {
            PointLoadResults.Warnings.Add("Load is very close to support A");
        }
        if (DistanceFromSupport > BeamLength * 0.9)
        {
            PointLoadResults.Warnings.Add("Load is very close to support B");
        }

        StateHasChanged();
    }

    private async Task SaveCalculation()
    {
        // TODO: Implement saving to OSS storage
        await Task.CompletedTask;
    }

    // JS Callback Methods
    [JSInvokable]
    public void OnElementSelected(string elementData)
    {
        try
        {
            var element = JsonSerializer.Deserialize<BIMElement>(elementData);
            if (element != null)
            {
                BearingElement = element;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing selected element: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnModelStatisticsReady(int elementCount)
    {
        Console.WriteLine($"Model loaded with {elementCount} elements");
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    // Helper Classes
    public class BIMElement
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public string Type { get; set; } = "";
    }

    public class PointLoadResult
    {
        public double ReactionA { get; set; }
        public double ReactionB { get; set; }
        public double MaxMoment { get; set; }
        public double MaxShear { get; set; }
        public List<string> Warnings { get; set; } = new();
    }
}