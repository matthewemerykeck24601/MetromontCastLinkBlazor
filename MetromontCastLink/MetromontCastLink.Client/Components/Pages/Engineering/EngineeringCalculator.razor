@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using System.Text.Json
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject IDataManagementService DataManagementService

<div class="design-calculator-container">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="fas fa-arrow-left"
                          @onclick="@(() => Navigation.NavigateTo("/engineering"))">
                    Back
                </SfButton>
                <h2>Engineering Calculator</h2>
                <span class="project-name">@(CurrentProject?.Name ?? "No Project Selected")</span>
            </div>
            <div class="header-right">
                <div class="model-selector">
                    <label>3D Model:</label>
                    <SfDropDownList TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                    @bind-Value="SelectedModelUrn"
                                    DataSource="@CloudModels"
                                    Placeholder="Select a model..."
                                    Enabled="@(!IsLoadingModels)"
                                    Width="300px">
                        <DropDownListFieldSettings Text="Name" Value="Urn" />
                        <DropDownListEvents TValue="string" TItem="MetromontCastLink.Client.Services.CloudModel"
                                            ValueChange="@OnModelSelected" />
                    </SfDropDownList>
                    @if (IsLoadingModels)
                    {
                        <SfSpinner Size="20" />
                    }
                </div>
                <SfButton CssClass="e-primary" IconCss="fas fa-save"
                          @onclick="SaveCalculation" Disabled="@(!HasCalculationResults)">
                    Save Results
                </SfButton>
            </div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="main-content">
        <!-- Forge Viewer Container -->
        <div class="viewer-container @(IsModelLoaded ? "" : "viewer-empty")">
            <div id="forgeViewer" class="forge-viewer-element"></div>

            @if (IsLoadingViewer)
            {
                <div class="viewer-loading">
                    <SfSpinner Size="40" />
                    <p>Loading 3D Model...</p>
                </div>
            }

            <!-- Viewer Controls -->
            @if (IsModelLoaded)
            {
                <div class="viewer-controls">
                    <SfButton IconCss="fas fa-home" Title="Reset View" @onclick="ResetView" />
                    <SfButton IconCss="fas fa-expand-arrows-alt" Title="Fit to View" @onclick="FitToView" />
                    <SfButton IconCss="fas fa-cube" Title="3D View" @onclick="Toggle3DView" />
                    <SfButton IconCss="fas fa-bomb" Title="Explode" @onclick="ToggleExplode" />
                    <SfButton IconCss="fas fa-cut" Title="Section" @onclick="ToggleSection" />
                    <SfButton IconCss="fas fa-ghost" Title="Ghosting" @onclick="ToggleGhosting" />
                    <SfButton IconCss="fas fa-ruler-combined" Title="Measure" @onclick="ToggleMeasure" />
                    <SfButton IconCss="fas fa-info-circle" Title="Properties" @onclick="ShowProperties" />
                    <SfButton IconCss="fas fa-search" Title="Search" @onclick="ShowSearch" />
                    <SfButton IconCss="fas fa-mouse-pointer" Title="Clear Selection" @onclick="ClearSelection" />
                </div>
            }
        </div>

        <!-- Calculation Panel -->
        <div class="calculation-panel">
            <SfTab>
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect="AnimationEffect.SlideLeft" />
                    <TabAnimationNext Effect="AnimationEffect.SlideRight" />
                </TabAnimationSettings>
                <TabItems>
                    <!-- Point Load Tab -->
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Point Loads" IconCss="fas fa-weight-hanging" />
                        </ChildContent>
                        <ContentTemplate>
                            <div class="calculation-form">
                                <h4>Point Load Calculation</h4>

                                <div class="form-section">
                                    <label>Bearing Element:</label>
                                    <div class="element-selector">
                                        <SfTextBox Value="@(BearingElement?.Name ?? "Select from viewer")"
                                                   Readonly="true" />
                                        <SfButton IconCss="fas fa-mouse-pointer"
                                                  @onclick="StartElementSelection">
                                            Select
                                        </SfButton>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label>Load Magnitude (kN):</label>
                                        <SfNumericTextBox @bind-Value="LoadMagnitude" Min="0" />
                                    </div>
                                    <div class="form-group">
                                        <label>Distance from Support (m):</label>
                                        <SfNumericTextBox @bind-Value="DistanceFromSupport" Min="0" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>Beam Length (m):</label>
                                    <SfNumericTextBox @bind-Value="BeamLength" Min="0" />
                                </div>

                                <SfButton CssClass="e-primary" @onclick="CalculatePointLoad">
                                    Calculate
                                </SfButton>

                                @if (PointLoadResults != null)
                                {
                                    <div class="results-panel">
                                        <h5>Results:</h5>
                                        <div class="result-item">
                                            <span>Status:</span>
                                            <span class="@(PointLoadResults.IsValid ? "pass" : "fail")">
                                                @PointLoadResults.Status
                                            </span>
                                        </div>
                                        <div class="result-item">
                                            <span>Utilization:</span>
                                            <span>@($"{PointLoadResults.Utilization:P0}")</span>
                                        </div>
                                        @foreach (var detail in PointLoadResults.Details)
                                        {
                                            <div class="result-item">
                                                <span>@detail.Label:</span>
                                                <span>@detail.Value @detail.Unit</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </ContentTemplate>
                    </TabItem>

                    <!-- Additional tabs for other calculation types can be added here -->
                </TabItems>
            </SfTab>
        </div>
    </div>
</div>

@code {
    // References
    private DotNetObjectReference<EngineeringCalculator>? objRef;
    private DotNetObjectReference<EngineeringCalculator>? dotNetRef;
    private bool IsViewerInitialized = false;

    // Project and Model Data
    private ACCProject? CurrentProject;
    private string? CurrentHubId;
    private List<CloudModel> CloudModels = new List<CloudModel>();
    private string? SelectedModelUrn;
    private string? CurrentModelName;

    // UI State
    private bool IsLoadingViewer = false;
    private bool IsLoadingModels = false;
    private bool IsModelLoaded = false;
    private string CurrentSelectionMode = "single";

    // Selected Elements
    private List<BIMElement> SelectedElements = new List<BIMElement>();
    private BIMElement? BearingElement;
    private List<BIMElement> ContributingElements = new List<BIMElement>();

    // Calculation Inputs
    private double LoadMagnitude = 0.0;
    private double DistanceFromSupport = 0.0;
    private double BeamLength = 0.0;

    // Calculation Results
    private PointLoadResult? PointLoadResults;
    private bool HasCalculationResults => PointLoadResults != null;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadProjectInfo();
        await LoadCloudModels();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoadingViewer = true;
            StateHasChanged();

            // Initialize empty Forge Viewer
            await InitializeEmptyViewer();

            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    private async Task LoadProjectInfo()
    {
        try
        {
            // Try to get project from session storage
            var projectJson = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(projectJson))
            {
                CurrentProject = JsonSerializer.Deserialize<ACCProject>(projectJson);

                if (CurrentProject != null)
                {
                    // The HubId should now be available directly from the project
                    CurrentHubId = CurrentProject.HubId;
                    Console.WriteLine($"Loaded project: {CurrentProject.Name} (ID: {CurrentProject.Id}, Hub: {CurrentHubId})");
                }
            }

            // If we still don't have a project, try to get it from the ACC service
            if (CurrentProject == null)
            {
                CurrentProject = await ACCService.GetCurrentProjectAsync();
                if (CurrentProject != null)
                {
                    CurrentHubId = CurrentProject.HubId;
                    Console.WriteLine($"Got current project from service: {CurrentProject.Name} (Hub: {CurrentHubId})");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading project info: {ex.Message}");
        }
    }

    private async Task LoadCloudModels()
    {
        if (CurrentProject == null)
        {
            Console.WriteLine("No project selected - cannot load models");
            return;
        }

        IsLoadingModels = true;
        StateHasChanged();

        try
        {
            Console.WriteLine($"Loading models for project: {CurrentProject.Id}");

            // Check if we have the hub ID
            if (string.IsNullOrEmpty(CurrentHubId))
            {
                Console.WriteLine("Warning: Hub ID is not available, trying to determine it...");

                // Try to get all projects and find the matching one to get its hub ID
                var allProjects = await ACCService.GetProjectsAsync();
                var matchingProject = allProjects.FirstOrDefault(p => p.Id == CurrentProject.Id);

                if (matchingProject != null && !string.IsNullOrEmpty(matchingProject.HubId))
                {
                    CurrentHubId = matchingProject.HubId;
                    CurrentProject.HubId = matchingProject.HubId; // Update our local project object
                    Console.WriteLine($"Found hub ID from projects list: {CurrentHubId}");
                }
                else
                {
                    Console.WriteLine("ERROR: Could not determine hub ID for project. Make sure the project is properly loaded.");
                    CloudModels = new List<CloudModel>();
                    return;
                }
            }

            // Now we should have both project ID and hub ID
            Console.WriteLine($"Getting models with Project ID: {CurrentProject.Id}, Hub ID: {CurrentHubId}");

            // Call the DataManagementService with both IDs in the correct order
            CloudModels = await DataManagementService.GetProjectModelsAsync(CurrentHubId, CurrentProject.Id);

            if (CloudModels == null || CloudModels.Count == 0)
            {
                Console.WriteLine("No models found. Please ensure:");
                Console.WriteLine("1. You have uploaded Revit models to your ACC project");
                Console.WriteLine("2. The models have been processed/translated for viewing");
                Console.WriteLine("3. You have proper permissions to access the models");
            }
            else
            {
                Console.WriteLine($"Found {CloudModels.Count} models");
                foreach (var model in CloudModels)
                {
                    Console.WriteLine($"  - {model.Name} (URN: {model.Urn})");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cloud models: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            CloudModels = new List<CloudModel>();
        }
        finally
        {
            IsLoadingModels = false;
            StateHasChanged();
        }
    }

    private async Task InitializeEmptyViewer()
    {
        try
        {
            var accessToken = await ACCService.GetAccessTokenAsync();
            if (string.IsNullOrEmpty(accessToken))
            {
                Console.WriteLine("No access token available for viewer initialization");
                return;
            }

            await JSRuntime.InvokeVoidAsync("ForgeViewer.initializeEmpty", "forgeViewer", accessToken, objRef);
            IsViewerInitialized = true;
            Console.WriteLine("Forge Viewer initialized successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing viewer: {ex.Message}");
        }
    }

    private async Task OnModelSelected(ChangeEventArgs<string, CloudModel> args)
    {
        if (string.IsNullOrEmpty(args.Value)) return;

        IsLoadingViewer = true;
        StateHasChanged();

        try
        {
            SelectedModelUrn = args.Value;
            var selectedModel = CloudModels.FirstOrDefault(m => m.Urn == SelectedModelUrn);
            CurrentModelName = selectedModel?.Name ?? "";

            Console.WriteLine($"Selected model: {CurrentModelName} (URN: {SelectedModelUrn})");

            // Load the model in Forge Viewer
            var accessToken = await ACCService.GetAccessTokenAsync();
            if (string.IsNullOrEmpty(accessToken))
            {
                Console.WriteLine("No access token available for loading model");
                return;
            }

            var success = await JSRuntime.InvokeAsync<bool>("ForgeViewer.loadModel",
                SelectedModelUrn, accessToken);

            IsModelLoaded = success;

            if (success)
            {
                Console.WriteLine($"Model loaded successfully: {CurrentModelName}");
            }
            else
            {
                Console.WriteLine($"Failed to load model: {CurrentModelName}");
                Console.WriteLine("Please check:");
                Console.WriteLine("1. The model URN is correct");
                Console.WriteLine("2. The model has been translated for viewing");
                Console.WriteLine("3. The access token has proper permissions");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading model: {ex.Message}");
            IsModelLoaded = false;
        }
        finally
        {
            IsLoadingViewer = false;
            StateHasChanged();
        }
    }

    // Viewer Control Methods
    private async Task ResetView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.resetView");
    private async Task FitToView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.fitToView");
    private async Task Toggle3DView() => await JSRuntime.InvokeVoidAsync("ForgeViewer.set3DView");
    private async Task ToggleExplode() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleExplode");
    private async Task ToggleSection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleSection");
    private async Task ToggleGhosting() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleGhosting");
    private async Task ToggleMeasure() => await JSRuntime.InvokeVoidAsync("ForgeViewer.toggleMeasure");
    private async Task ShowProperties() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showProperties");
    private async Task ShowSearch() => await JSRuntime.InvokeVoidAsync("ForgeViewer.showSearch");
    private async Task ClearSelection() => await JSRuntime.InvokeVoidAsync("ForgeViewer.clearSelection");

    // Element Selection
    private async Task StartElementSelection()
    {
        await JSRuntime.InvokeVoidAsync("ForgeViewer.setSelectionMode", "single");
        CurrentSelectionMode = "single";
    }

    // Calculation Methods
    private async Task CalculatePointLoad()
    {
        // Simulate point load calculation
        PointLoadResults = new PointLoadResult
        {
            Status = "Pass",
            DesignCode = "PCI-8",
            SafetyFactor = 1.5,
            Utilization = 0.75,
            IsPCICompliant = true,
            Details = new List<ResultDetail>
            {
                new ResultDetail { Label = "Max Moment", Value = "125.5", Unit = "kN-m" },
                new ResultDetail { Label = "Max Shear", Value = "85.2", Unit = "kN" },
                new ResultDetail { Label = "Deflection", Value = "12.3", Unit = "mm" }
            },
            Warnings = new List<string>()
        };

        StateHasChanged();
    }

    private async Task SaveCalculation()
    {
        // TODO: Implement saving to OSS storage
        Console.WriteLine("Saving calculation results...");
    }

    // JS Interop callbacks
    [JSInvokable]
    public void OnElementSelected(string elementId, string elementName)
    {
        Console.WriteLine($"Element selected: {elementName} (ID: {elementId})");
        BearingElement = new BIMElement { Id = elementId, Name = elementName };
        InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void OnViewerError(string error)
    {
        Console.WriteLine($"Viewer error: {error}");
    }

    public void Dispose()
    {
        objRef?.Dispose();
        dotNetRef?.Dispose();
    }

    // Supporting classes
    public class BIMElement
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Category { get; set; } = "";
        public Dictionary<string, object> Properties { get; set; } = new();
    }

    public class PointLoadResult : CalculationResult
    {
        // Inherits all properties from CalculationResult
    }
}