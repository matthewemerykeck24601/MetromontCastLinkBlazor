@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IStorageService StorageService

<PageTitle>Design Calculator - Metromont CastLink</PageTitle>

<style>
    .calculator-page {
        padding: 2rem;
        background: #f5f6fa;
        min-height: calc(100vh - 60px);
    }

    .page-header {
        margin-bottom: 2rem;
    }

    .page-header h1 {
        margin: 0 0 0.5rem 0;
        font-size: 2rem;
        font-weight: 600;
        color: #1e293b;
    }

    .page-header p {
        margin: 0;
        color: #64748b;
        font-size: 1.125rem;
    }

    .calculator-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.06);
        overflow: hidden;
    }

    .tab-content {
        padding: 2rem;
    }

    .calculation-section {
        margin-bottom: 2rem;
    }

    .calculation-section h3 {
        margin: 0 0 1rem 0;
        font-size: 1.25rem;
        font-weight: 600;
        color: #1e293b;
    }

    .results-panel {
        background: #f8fafc;
        border-radius: 8px;
        padding: 1.5rem;
        margin-top: 2rem;
    }

    .results-panel h4 {
        margin: 0 0 1rem 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #1e293b;
    }

    .result-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

    .result-item:last-child {
        border-bottom: none;
    }

    .result-label {
        font-weight: 500;
        color: #64748b;
    }

    .result-value {
        font-weight: 600;
        color: #1e293b;
        font-size: 1.125rem;
    }

    .result-value.success {
        color: #10b981;
    }

    .result-value.warning {
        color: #f59e0b;
    }

    .result-value.error {
        color: #ef4444;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #e5e7eb;
    }

    .bed-selection-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: #f8fafc;
        border-radius: 8px;
    }

    .bed-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
    }

    .bed-card {
        background: white;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        padding: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .bed-card:hover {
        border-color: #6366f1;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    }

    .bed-card.selected {
        border-color: #6366f1;
        background: #f0f9ff;
    }

    .bed-name {
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.5rem;
    }

    .bed-info {
        font-size: 0.875rem;
        color: #64748b;
    }

    .allowed-products {
        margin-top: 0.5rem;
        font-size: 0.75rem;
        color: #6366f1;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .calculator-page {
            padding: 1rem;
        }

        .tab-content {
            padding: 1rem;
        }

        .bed-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }

        .action-buttons .e-btn {
            width: 100%;
        }
    }
</style>

<div class="calculator-page">
    <div class="page-header">
        <h1>Design Calculator</h1>
        <p>Advanced precast concrete design calculations with PCI compliance</p>
    </div>

    <div class="calculator-container">
        <SfTab>
            <TabItems>
                <TabItem Header="@(new TabHeader { Text = "Bed Selection" })">
                    <ContentTemplate>
                        <div class="tab-content">
                            <div class="bed-selection-section">
                                <h3>Select Bed for Design</h3>
                                <p>Choose the bed type and specific bed for your design calculations</p>
                                
                                <div class="bed-grid">
                                    @foreach (var bed in AvailableBeds)
                                    {
                                        <div class="bed-card @(bed.Id == SelectedBedId ? "selected" : "")" 
                                             @onclick="@(() => SelectBed(bed.Id))">
                                            <div class="bed-name">@bed.Name</div>
                                            <div class="bed-info">
                                                Type: @bed.Type | Length: @bed.Length ft
                                            </div>
                                            <div class="allowed-products">
                                                Supports: @string.Join(", ", bed.AllowedProductTypes.Take(3))
                                                @if (bed.AllowedProductTypes.Count > 3)
                                                {
                                                    <span>...</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(SelectedBedId))
                            {
                                <div class="results-panel">
                                    <h4>Selected Bed Specifications</h4>
                                    @{
                                        var selectedBed = AvailableBeds.FirstOrDefault(b => b.Id == SelectedBedId);
                                        if (selectedBed != null)
                                        {
                                            <div class="result-item">
                                                <span class="result-label">Bed Name</span>
                                                <span class="result-value">@selectedBed.Name</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Maximum Length</span>
                                                <span class="result-value">@selectedBed.Length ft</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Maximum Width</span>
                                                <span class="result-value">@selectedBed.Width ft</span>
                                            </div>
                                            <div class="result-item">
                                                <span class="result-label">Capacity</span>
                                                <span class="result-value">@selectedBed.Capacity lbs</span>
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem Header="@(new TabHeader { Text = "Beam Design" })">
                    <ContentTemplate>
                        <div class="tab-content">
                            <BeamDesignCalculator OnCalculationComplete="@HandleCalculationComplete" />
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem Header="@(new TabHeader { Text = "Double Tee Design" })">
                    <ContentTemplate>
                        <div class="tab-content">
                            <DoubleTeeDesignCalculator OnCalculationComplete="@HandleCalculationComplete" />
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem Header="@(new TabHeader { Text = "Column Design" })">
                    <ContentTemplate>
                        <div class="tab-content">
                            <ColumnDesignCalculator OnCalculationComplete="@HandleCalculationComplete" />
                        </div>
                    </ContentTemplate>
                </TabItem>

                <TabItem Header="@(new TabHeader { Text = "Connection Design" })">
                    <ContentTemplate>
                        <div class="tab-content">
                            <ConnectionDesignCalculator OnCalculationComplete="@HandleCalculationComplete" />
                        </div>
                    </ContentTemplate>
                </TabItem>
            </TabItems>
        </SfTab>

        @if (CalculationResult != null)
        {
            <div class="results-panel" style="margin: 2rem;">
                <h4>Calculation Results</h4>
                <div class="result-item">
                    <span class="result-label">Design Status</span>
                    <span class="result-value @(CalculationResult.IsValid ? "success" : "error")">
                        @(CalculationResult.IsValid ? "PASS" : "FAIL")
                    </span>
                </div>
                <div class="result-item">
                    <span class="result-label">PCI Compliance</span>
                    <span class="result-value @(CalculationResult.IsPCICompliant ? "success" : "warning")">
                        @(CalculationResult.IsPCICompliant ? "COMPLIANT" : "NON-COMPLIANT")
                    </span>
                </div>
                @if (CalculationResult.Messages.Any())
                {
                    <div style="margin-top: 1rem;">
                        <strong>Notes:</strong>
                        <ul style="margin: 0.5rem 0 0 1.5rem;">
                            @foreach (var message in CalculationResult.Messages)
                            {
                                <li>@message</li>
                            }
                        </ul>
                    </div>
                }
                
                <div class="action-buttons">
                    <SfButton CssClass="e-outline" @onclick="ExportResults">
                        <span class="e-icons e-export"></span> Export Results
                    </SfButton>
                    <SfButton CssClass="e-primary" @onclick="SaveToACC">
                        <span class="e-icons e-save"></span> Save to ACC
                    </SfButton>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<BedInformation> AvailableBeds = new();
    private string? SelectedBedId;
    private CalculationResult? CalculationResult;

    protected override async Task OnInitializedAsync()
    {
        await LoadBedInformation();
    }

    private async Task LoadBedInformation()
    {
        AvailableBeds = BedDatabase.GetAllBeds();
    }

    private void SelectBed(string bedId)
    {
        SelectedBedId = bedId;
    }

    private void HandleCalculationComplete(CalculationResult result)
    {
        CalculationResult = result;
    }

    private async Task SaveToACC()
    {
        if (CalculationResult != null)
        {
            // Save calculation results to ACC
            var saved = await StorageService.SaveCalculationAsync(CalculationResult);
            if (saved)
            {
                // Show success notification
                await JSRuntime.InvokeVoidAsync("alert", "Calculation saved to ACC successfully!");
            }
        }
    }

    private async Task ExportResults()
    {
        if (CalculationResult != null)
        {
            // Export results as PDF or Excel
            await JSRuntime.InvokeVoidAsync("alert", "Export functionality will be implemented soon!");
        }
    }

    public class TabHeader
    {
        public string Text { get; set; } = "";
    }
}