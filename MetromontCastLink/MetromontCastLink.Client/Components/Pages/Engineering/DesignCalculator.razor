@page "/engineering/calculator"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Client.Services
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@inject NavigationManager Navigation
@inject IACCService ACCService
@inject IStorageService StorageService

<PageTitle>Design Calculator - Engineering</PageTitle>

<div class="design-calculator-page">
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="e-icons e-arrow-left" @onclick="GoBack">Back</SfButton>
                <h2>Engineering Design Calculator</h2>
            </div>
            <div class="header-right">
                <SfButton CssClass="e-outline" IconCss="e-icons e-reset" @onclick="ResetCalculator">Reset</SfButton>
                <SfButton CssClass="e-primary" IconCss="e-icons e-save" @onclick="SaveCalculation" 
                         Disabled="@(!HasCalculationResults)">Save</SfButton>
                <SfButton CssClass="e-success" IconCss="e-icons e-export" @onclick="ExportResults" 
                         Disabled="@(!HasCalculationResults)">Export</SfButton>
            </div>
        </div>
    </div>

    <div class="calculator-container">
        <!-- Left Panel: Calculator Type Selection -->
        <div class="calculator-sidebar">
            <h3>Calculation Type</h3>
            <SfTab @ref="CalculatorTab" HeaderPlacement="HeaderPosition.Left" Height="100%">
                <TabItems>
                    <TabItem Header="Beam Design">
                        <ContentTemplate>
                            <BeamDesignCalculator @ref="BeamCalculator" OnCalculationComplete="OnCalculationComplete" />
                        </ContentTemplate>
                    </TabItem>
                    <TabItem Header="Column Design">
                        <ContentTemplate>
                            <ColumnDesignCalculator @ref="ColumnCalculator" OnCalculationComplete="OnCalculationComplete" />
                        </ContentTemplate>
                    </TabItem>
                    <TabItem Header="Connection Design">
                        <ContentTemplate>
                            <ConnectionDesignCalculator @ref="ConnectionCalculator" OnCalculationComplete="OnCalculationComplete" />
                        </ContentTemplate>
                    </TabItem>
                    <TabItem Header="Shear Design">
                        <ContentTemplate>
                            <ShearDesignCalculator @ref="ShearCalculator" OnCalculationComplete="OnCalculationComplete" />
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </div>

        <!-- Right Panel: Results Display -->
        <div class="results-panel">
            <h3>Calculation Results</h3>
            @if (CurrentResult != null)
            {
                <div class="result-summary">
                    <div class="result-header">
                        <span class="result-type">@CurrentResult.CalculationType</span>
                        <span class="result-status @GetStatusClass(CurrentResult.Status)">
                            @CurrentResult.Status
                        </span>
                    </div>
                    <div class="result-metrics">
                        <div class="metric-item">
                            <span class="metric-label">Design Code</span>
                            <span class="metric-value">@CurrentResult.DesignCode</span>
                        </div>
                        <div class="metric-item">
                            <span class="metric-label">Safety Factor</span>
                            <span class="metric-value">@CurrentResult.SafetyFactor.ToString("F2")</span>
                        </div>
                        <div class="metric-item critical">
                            <span class="metric-label">Utilization</span>
                            <span class="metric-value @GetUtilizationClass(CurrentResult.Utilization)">
                                @CurrentResult.Utilization.ToString("P0")
                            </span>
                        </div>
                    </div>
                </div>

                <div class="result-details">
                    <h4>Details</h4>
                    <div class="details-grid">
                        @foreach (var detail in CurrentResult.Details)
                        {
                            <div class="detail-item">
                                <span class="detail-label">@detail.Label</span>
                                <span class="detail-value">@detail.Value @detail.Unit</span>
                            </div>
                        }
                    </div>
                </div>

                @if (CurrentResult.Warnings.Any())
                {
                    <div class="result-warnings">
                        <h5>Warnings</h5>
                        @foreach (var warning in CurrentResult.Warnings)
                        {
                            <div class="warning-item">
                                <span class="e-icons e-warning"></span>
                                <span>@warning</span>
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="no-results">
                    <div class="no-results-icon">📐</div>
                    <p>Select a calculation type and enter values to begin.</p>
                </div>
            }
        </div>
    </div>

    <!-- Calculation History -->
    <div class="history-section">
        <h3>Calculation History</h3>
        @if (CalculationHistory.Any())
        {
            <div class="history-list">
                @foreach (var calc in CalculationHistory.OrderByDescending(c => c.Timestamp).Take(5))
                {
                    <div class="history-item" @onclick="() => LoadCalculation(calc)">
                        <div class="history-icon">
                            <span class="@GetCalculationIcon(calc.Type)"></span>
                        </div>
                        <div class="history-info">
                            <span class="history-type">@calc.Type</span>
                            <span class="history-time">@calc.Timestamp.ToString("MMM dd, HH:mm")</span>
                        </div>
                        <div class="history-result">
                            <span class="@GetUtilizationClass(calc.Utilization)">@calc.Utilization.ToString("P0")</span>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p class="no-history">No previous calculations</p>
        }
    </div>
</div>

@code {
    private SfTab? CalculatorTab;
    private BeamDesignCalculator? BeamCalculator;
    private ColumnDesignCalculator? ColumnCalculator;
    private ConnectionDesignCalculator? ConnectionCalculator;
    private ShearDesignCalculator? ShearCalculator;

    private CalculationResult? CurrentResult;
    private List<CalculationHistory> CalculationHistory = new();
    private bool HasCalculationResults => CurrentResult != null;

    protected override async Task OnInitializedAsync()
    {
        // Load calculation history from storage
        await LoadCalculationHistory();
    }

    private async Task OnCalculationComplete(CalculationResult result)
    {
        CurrentResult = result;
        
        // Add to history
        var historyItem = new CalculationHistory
        {
            Id = Guid.NewGuid().ToString(),
            Type = result.CalculationType,
            Timestamp = DateTime.Now,
            Utilization = result.Utilization,
            Result = result
        };
        
        CalculationHistory.Insert(0, historyItem);
        StateHasChanged();
    }

    private async Task SaveCalculation()
    {
        if (CurrentResult == null) return;

        try
        {
            // Save to ACC storage
            var json = System.Text.Json.JsonSerializer.Serialize(CurrentResult);
            var bytes = System.Text.Encoding.UTF8.GetBytes(json);
            var fileName = $"calc_{DateTime.Now:yyyyMMddHHmmss}.json";
            
            // await StorageService.UploadFileAsync(fileName, bytes, "application/json");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving calculation: {ex.Message}");
        }
    }

    private async Task ExportResults()
    {
        if (CurrentResult == null) return;

        // Export logic here
    }

    private void ResetCalculator()
    {
        CurrentResult = null;
        StateHasChanged();
    }

    private async Task LoadCalculationHistory()
    {
        // Load from storage
    }

    private void LoadCalculation(CalculationHistory calc)
    {
        CurrentResult = calc.Result;
        StateHasChanged();
    }

    private string GetStatusClass(string status)
    {
        return status == "Pass" ? "status-pass" : "status-fail";
    }

    private string GetUtilizationClass(double utilization)
    {
        if (utilization <= 0.7) return "utilization-safe";
        if (utilization <= 0.9) return "utilization-warning";
        return "utilization-danger";
    }

    private string GetCalculationIcon(string type)
    {
        return type switch
        {
            "Beam Design" => "e-icons e-horizontal",
            "Column Design" => "e-icons e-vertical",
            "Connection Design" => "e-icons e-link",
            "Shear Design" => "e-icons e-cut",
            _ => "e-icons e-calculator"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/engineering");
    }

    // Component stubs (would be separate files in real implementation)
    public class ColumnDesignCalculator : BeamDesignCalculator { }
    public class ConnectionDesignCalculator : BeamDesignCalculator { }
    public class ShearDesignCalculator : BeamDesignCalculator { }
}