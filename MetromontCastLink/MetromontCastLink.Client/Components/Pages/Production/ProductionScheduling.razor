@page "/production/scheduling"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Shared.Services
@using MetromontCastLink.Client.Services
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Grids
@inject IACCService ACCService
@inject IStorageService StorageService
@inject NavigationManager Navigation

<PageTitle>Production Scheduling - Metromont CastLink</PageTitle>

<style>
    .production-scheduling-page {
        padding: 1rem;
        background: #f5f6fa;
        min-height: calc(100vh - 60px);
    }

    .page-header {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.06);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .header-left h2 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 600;
            color: #1e293b;
        }

    .header-right {
        display: flex;
        gap: 0.5rem;
    }

    .scheduling-container {
        display: flex;
        gap: 1.5rem;
        height: calc(100vh - 200px);
    }

    .control-panel {
        width: 300px;
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.06);
        overflow-y: auto;
    }

    .control-section {
        margin-bottom: 2rem;
    }

        .control-section h3 {
            margin: 0 0 1rem 0;
            font-size: 1.125rem;
            font-weight: 600;
            color: #1e293b;
        }

    .filter-group {
        margin-bottom: 1rem;
    }

        .filter-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #475569;
        }

    .schedule-container {
        flex: 1;
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.06);
        overflow: hidden;
    }

    .resource-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .resource-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem;
        background: #f8fafc;
        border-radius: 6px;
        border: 1px solid #e2e8f0;
    }

        .resource-item.available {
            border-color: #10b981;
            background: #f0fdf4;
        }

        .resource-item.occupied {
            border-color: #f59e0b;
            background: #fffbeb;
        }

    .resource-name {
        font-weight: 500;
        color: #1e293b;
    }

    .resource-status {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: 500;
    }

    .resource-item.available .resource-status {
        background: #10b981;
        color: white;
    }

    .resource-item.occupied .resource-status {
        background: #f59e0b;
        color: white;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .stat-item {
        text-align: center;
        padding: 1rem;
        background: #f8fafc;
        border-radius: 6px;
        border: 1px solid #e2e8f0;
    }

    .stat-value {
        display: block;
        font-size: 1.5rem;
        font-weight: 600;
        color: #1e293b;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        display: block;
        font-size: 0.75rem;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    /* Event template styles */
    .event-template {
        padding: 0.5rem;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border-radius: 4px;
    }

    .event-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.25rem;
    }

    .event-title {
        font-weight: 600;
        font-size: 0.875rem;
    }

    .event-status {
        font-size: 0.625rem;
        padding: 0.125rem 0.375rem;
        border-radius: 3px;
        font-weight: 500;
    }

    .event-details {
        font-size: 0.75rem;
        opacity: 0.8;
    }

    .status-completed {
        background: #10b981;
        color: white;
    }

    .status-in-progress {
        background: #3b82f6;
        color: white;
    }

    .status-scheduled {
        background: #8b5cf6;
        color: white;
    }

    /* Loading spinner */
    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
</style>

<div class="production-scheduling-page">
    <!-- Header -->
    <div class="page-header">
        <div class="header-content">
            <div class="header-left">
                <SfButton CssClass="e-flat" IconCss="e-icons e-arrow-left" @onclick="GoBack" />
                <h2>Production Scheduling</h2>
            </div>
            <div class="header-right">
                <SfButton CssClass="e-primary" IconCss="e-icons e-add" @onclick="ShowNewScheduleDialog">
                    New Schedule
                </SfButton>
                <SfButton CssClass="e-outline" IconCss="e-icons e-refresh" @onclick="RefreshSchedule">
                    Refresh
                </SfButton>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="scheduling-container">
        <!-- Control Panel -->
        <div class="control-panel">
            <div class="control-section">
                <h3>Filters</h3>

                <div class="filter-group">
                    <label>Project</label>
                    <SfDropDownList TValue="string" TItem="ACCProject" @bind-Value="@CurrentProjectId"
                                    DataSource="@Projects" Placeholder="Select project">
                        <DropDownListFieldSettings Text="Name" Value="Id" />
                        <DropDownListEvents TValue="string" TItem="ACCProject" ValueChange="@OnProjectSelected" />
                    </SfDropDownList>
                </div>

                <div class="filter-group">
                    <label>Date Range</label>
                    <SfDateRangePicker TValue="DateTime?" @bind-StartDate="@StartDate" @bind-EndDate="@EndDate"
                                       Placeholder="Select date range" Format="MM/dd/yyyy">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="OnDateRangeChange" />
                    </SfDateRangePicker>
                </div>

                <div class="filter-group">
                    <label>Bed Types</label>
                    <SfMultiSelect TValue="string[]" TItem="BedType" @bind-Value="@SelectedBedTypes"
                                   DataSource="@BedTypes" Placeholder="All bed types">
                        <MultiSelectFieldSettings Text="Name" Value="Id" />
                        <MultiSelectEvents TValue="string[]" TItem="BedType" ValueChange="OnBedTypeChange" />
                    </SfMultiSelect>
                </div>

                <div class="filter-group">
                    <label>Product Types</label>
                    <SfMultiSelect TValue="string[]" TItem="ProductType" @bind-Value="@SelectedProductTypes"
                                   DataSource="@ProductTypes" Placeholder="All product types">
                        <MultiSelectFieldSettings Text="Name" Value="Id" />
                        <MultiSelectEvents TValue="string[]" TItem="ProductType" ValueChange="OnProductTypeChange" />
                    </SfMultiSelect>
                </div>
            </div>

            <div class="control-section">
                <h3>Bed Resources</h3>
                <div class="resource-list">
                    @foreach (var bed in BedResources)
                    {
                        <div class="resource-item @(bed.IsAvailable ? "available" : "occupied")">
                            <span class="resource-name">@bed.Name</span>
                            <span class="resource-status">@(bed.IsAvailable ? "Available" : "Occupied")</span>
                        </div>
                    }
                </div>
            </div>

            <div class="control-section">
                <h3>Statistics</h3>
                <div class="stats-grid">
                    <div class="stat-item">
                        <span class="stat-value">@ProductionEvents.Count</span>
                        <span class="stat-label">Total Events</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">@ProductionEvents.Count(e => e.Status == "In Progress")</span>
                        <span class="stat-label">In Progress</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-value">@ProductionEvents.Count(e => e.Status == "Completed")</span>
                        <span class="stat-label">Completed</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Schedule View -->
        <div class="schedule-container">
            <SfSchedule @ref="ScheduleRef" TValue="ProductionEvent" Height="100%"
                        StartHour="06:00" EndHour="18:00"
                        CurrentView="View.TimelineWeek">
                <ScheduleViews>
                    <ScheduleView Option="View.TimelineDay" />
                    <ScheduleView Option="View.TimelineWeek" />
                    <ScheduleView Option="View.TimelineMonth" />
                    <ScheduleView Option="View.Agenda" />
                </ScheduleViews>
                <ScheduleResources>
                    <ScheduleResource TItem="BedResource" TValue="string"
                                      DataSource="@BedResources" Field="BedId"
                                      Title="Production Bed" Name="Beds"
                                      TextField="Name" IdField="Id" ColorField="Color" />
                </ScheduleResources>
                <ScheduleEventSettings DataSource="@ProductionEvents" TValue="ProductionEvent">
                    <Template>
                        @{
                            var evt = (context as ProductionEvent);
                        }
                        <div class="event-template @GetStatusClass(evt?.Status)">
                            <div class="event-header">
                                <span class="event-title">@evt?.ProductName</span>
                                <span class="event-status">@evt?.Status</span>
                            </div>
                            <div class="event-details">
                                <span>@evt?.Quantity pcs</span>
                                <span>@evt?.ProjectName</span>
                            </div>
                        </div>
                    </Template>
                </ScheduleEventSettings>
                <ScheduleEvents TValue="ProductionEvent"
                                EventRendered="OnEventRendered"
                                ActionBegin="OnActionBegin"
                                ActionComplete="OnActionComplete" />
            </SfSchedule>
        </div>
    </div>

    <!-- Toast Notification -->
    <SfToast @ref="ToastObj" ShowCloseButton="true" Timeout="5000">
        <ToastPosition X="Right" Y="Top" />
    </SfToast>
</div>

@code {
    // Component References
    private SfSchedule<ProductionEvent>? ScheduleRef;
    private SfToast? ToastObj;

    // Properties for filters and data
    private string? CurrentProjectId { get; set; }
    private DateTime? StartDate { get; set; } = DateTime.Today;
    private DateTime? EndDate { get; set; } = DateTime.Today.AddDays(7);
    private string[]? SelectedBedTypes { get; set; }
    private string[]? SelectedProductTypes { get; set; }

    // Data collections
    private List<ACCProject> Projects { get; set; } = new();
    private List<BedResource> BedResources { get; set; } = new();
    private List<ProductionEvent> ProductionEvents { get; set; } = new();
    private List<BedType> BedTypes { get; set; } = new();
    private List<ProductType> ProductTypes { get; set; } = new();

    // Loading states
    private bool IsLoading { get; set; } = false;
    private bool IsScheduleLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize bed types
        BedTypes = new List<BedType>
        {
            new BedType { Id = "1", Name = "Standard Bed" },
            new BedType { Id = "2", Name = "Heavy Duty Bed" },
            new BedType { Id = "3", Name = "Specialty Bed" }
        };

        // Initialize product types
        ProductTypes = new List<ProductType>
        {
            new ProductType { Id = "1", Name = "Double Tee" },
            new ProductType { Id = "2", Name = "Wall Panel" },
            new ProductType { Id = "3", Name = "Column" },
            new ProductType { Id = "4", Name = "Beam/Spandrel" },
            new ProductType { Id = "5", Name = "Special Product" }
        };

        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        try
        {
            IsLoading = true;

            // Check authentication
            if (!await ACCService.IsAuthenticatedAsync())
            {
                Navigation.NavigateTo("/");
                return;
            }

            // Load projects
            Projects = await ACCService.GetProjectsAsync();

            // Get current project
            var currentProject = await ACCService.GetCurrentProjectAsync();
            if (currentProject != null)
            {
                CurrentProjectId = currentProject.Id;
                await LoadScheduleData();
            }

            // Initialize bed resources (demo data - replace with actual data source)
            InitializeBedResources();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
            await ShowToast("Error loading data", "error");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void InitializeBedResources()
    {
        BedResources = new List<BedResource>
        {
            new BedResource { Id = "bed-1", Name = "Bed 1", Type = "Standard", Color = "#3B82F6", IsAvailable = true },
            new BedResource { Id = "bed-2", Name = "Bed 2", Type = "Standard", Color = "#3B82F6", IsAvailable = true },
            new BedResource { Id = "bed-3", Name = "Bed 3", Type = "Heavy Duty", Color = "#8B5CF6", IsAvailable = false },
            new BedResource { Id = "bed-4", Name = "Bed 4", Type = "Heavy Duty", Color = "#8B5CF6", IsAvailable = true },
            new BedResource { Id = "bed-5", Name = "Bed 5", Type = "Specialty", Color = "#10B981", IsAvailable = true }
        };
    }

    private async Task LoadScheduleData()
    {
        try
        {
            IsScheduleLoading = true;

            // Load production events from storage or API
            // For now, using demo data
            ProductionEvents = GenerateDemoEvents();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schedule data: {ex.Message}");
            await ShowToast("Error loading schedule", "error");
        }
        finally
        {
            IsScheduleLoading = false;
        }
    }

    private List<ProductionEvent> GenerateDemoEvents()
    {
        var events = new List<ProductionEvent>();
        var startDate = StartDate ?? DateTime.Today;

        // Generate some demo events
        events.Add(new ProductionEvent
        {
            Id = Guid.NewGuid().ToString(),
            ProductName = "DT-2024-001",
            ProductType = "Double Tee",
            Quantity = 4,
            BedId = "bed-1",
            ProjectId = CurrentProjectId,
            ProjectName = "Parking Garage A",
            StartTime = startDate.AddHours(7),
            EndTime = startDate.AddHours(15),
            Status = "In Progress",
            DesignNumber = "DT-STD-001"
        });

        events.Add(new ProductionEvent
        {
            Id = Guid.NewGuid().ToString(),
            ProductName = "WP-2024-015",
            ProductType = "Wall Panel",
            Quantity = 6,
            BedId = "bed-2",
            ProjectId = CurrentProjectId,
            ProjectName = "Office Building B",
            StartTime = startDate.AddDays(1).AddHours(8),
            EndTime = startDate.AddDays(1).AddHours(14),
            Status = "Scheduled",
            DesignNumber = "WP-STD-003"
        });

        return events;
    }

    // Event Handlers
    private async Task OnProjectSelected(ChangeEventArgs<string, ACCProject> args)
    {
        CurrentProjectId = args.Value;
        await LoadScheduleData();
    }

    private async Task OnDateRangeChange(RangePickerEventArgs<DateTime?> args)
    {
        if (args.StartDate.HasValue && args.EndDate.HasValue)
        {
            StartDate = args.StartDate;
            EndDate = args.EndDate;
            await RefreshSchedule();
        }
    }

    private async Task OnBedTypeChange(MultiSelectChangeEventArgs<string[]> args)
    {
        SelectedBedTypes = args.Value;
        await RefreshSchedule();
    }

    private async Task OnProductTypeChange(MultiSelectChangeEventArgs<string[]> args)
    {
        SelectedProductTypes = args.Value;
        await RefreshSchedule();
    }

    private async Task RefreshSchedule()
    {
        await LoadScheduleData();
        ScheduleRef?.RefreshEventsAsync();
    }

    // Schedule Event Handlers
    private void OnEventRendered(EventRenderedArgs<ProductionEvent> args)
    {
        // Custom rendering logic if needed
    }

    private async Task OnActionBegin(Syncfusion.Blazor.Schedule.ActionEventArgs<ProductionEvent> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange)
        {
            // Validate event data
            if (args.AddedRecords?.Count > 0 || args.ChangedRecords?.Count > 0)
            {
                var eventData = args.AddedRecords?.FirstOrDefault() ?? args.ChangedRecords?.FirstOrDefault();
                if (eventData != null)
                {
                    // Add validation logic here
                }
            }
        }
    }

    private async Task OnActionComplete(Syncfusion.Blazor.Schedule.ActionEventArgs<ProductionEvent> args)
    {
        if (args.ActionType == ActionType.EventCreate)
        {
            await ShowToast("Event created successfully", "success");
        }
        else if (args.ActionType == ActionType.EventChange)
        {
            await ShowToast("Event updated successfully", "success");
        }
        else if (args.ActionType == ActionType.EventRemove)
        {
            await ShowToast("Event removed successfully", "success");
        }
    }

    // UI Action Methods
    private void GoBack()
    {
        Navigation.NavigateTo("/production");
    }

    private void ShowNewScheduleDialog()
    {
        // TODO: Implement new schedule dialog
        Console.WriteLine("Show new schedule dialog");
    }

    private string GetStatusClass(string? status)
    {
        return status switch
        {
            "Completed" => "status-completed",
            "In Progress" => "status-in-progress",
            "Scheduled" => "status-scheduled",
            _ => "status-default"
        };
    }

    // Toast notification helper
    private async Task ShowToast(string message, string type = "info")
    {
        var toastModel = new ToastModel
        {
            Title = type == "error" ? "Error" : type == "success" ? "Success" : "Info",
            Content = message,
            CssClass = $"e-toast-{type}",
            Icon = type == "error" ? "e-error" : type == "success" ? "e-success" : "e-info"
        };

        await ToastObj!.ShowAsync(toastModel);
    }
}