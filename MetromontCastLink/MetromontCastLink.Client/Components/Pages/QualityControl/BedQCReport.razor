@page "/quality/bed-report/{BedId}"
@using MetromontCastLink.Shared.Models
@using MetromontCastLink.Client.Services
@using System.Text.Json
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Navigations
@inject IACCService ACCService
@inject IStorageService StorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Bed QC Report - @BedInfo?.Name</PageTitle>

<div class="bed-qc-report">
    <!-- Header -->
    <div class="report-header">
        <div class="header-left">
            <h2>Bed QC Report</h2>
            <div class="bed-info-display">
                <SfChip>
                    <ChipItems>
                        <ChipItem>
                            <span class="e-icons e-home"></span>
                            @BedInfo?.Name
                        </ChipItem>
                    </ChipItems>
                </SfChip>
                <span class="report-id">Report ID: @ReportId</span>
            </div>
        </div>
        <div class="header-right">
            <SfButton CssClass="e-outline" IconCss="e-icons e-close" @onclick="CloseReport">Close</SfButton>
            <SfButton CssClass="e-primary" IconCss="e-icons e-save" @onclick="SaveReport" Disabled="@(!CanSave)">
                Save to ACC
            </SfButton>
            <SfButton CssClass="e-success" IconCss="e-icons e-export" @onclick="ExportPDF" Disabled="@(!HasData)">
                Export PDF
            </SfButton>
        </div>
    </div>

    <!-- Project Metadata Section -->
    <div class="section-card">
        <h3 class="section-title">Project Information</h3>
        <div class="form-grid">
            <div class="form-group">
                <label>Project Name <span class="required">*</span></label>
                <SfDropDownList TValue="string" TItem="ACCProject" @bind-Value="@SelectedProjectId"
                                DataSource="@Projects" Placeholder="Select a project">
                    <DropDownListFieldSettings Text="Name" Value="Id" />
                    <DropDownListEvents TValue="string" TItem="ACCProject" ValueChange="OnProjectChange" />
                </SfDropDownList>
            </div>
            <div class="form-group">
                <label>Project Number</label>
                <SfTextBox @bind-Value="@ProjectNumber" Readonly="true" />
            </div>
            <div class="form-group">
                <label>Date <span class="required">*</span></label>
                <SfDatePicker TValue="DateTime?" @bind-Value="@ReportDate" Format="MM/dd/yyyy" />
            </div>
            <div class="form-group">
                <label>Calculated By <span class="required">*</span></label>
                <SfDropDownList TValue="string" TItem="ProjectMember" @bind-Value="@CalculatedBy"
                                DataSource="@ProjectMembers" Placeholder="Select team member">
                    <DropDownListFieldSettings Text="Name" Value="Name" />
                </SfDropDownList>
            </div>
            <div class="form-group">
                <label>Reviewed By</label>
                <SfDropDownList TValue="string" TItem="ProjectMember" @bind-Value="@ReviewedBy"
                                DataSource="@ProjectMembers" Placeholder="Select reviewer">
                    <DropDownListFieldSettings Text="Name" Value="Name" />
                </SfDropDownList>
            </div>
            <div class="form-group">
                <label>Location</label>
                <SfTextBox @bind-Value="@Location" Placeholder="Enter location" />
            </div>
            <div class="form-group form-group-full">
                <label>Notes</label>
                <SfTextBox @bind-Value="@Notes" Multiline="true" Placeholder="Add any additional notes" />
            </div>
        </div>
    </div>

    <!-- Calculators Grid -->
    <div class="calculators-grid">
        <!-- Self-Stressing Calculator -->
        <div class="calculator-card self-stressing">
            <h3 class="calculator-title">
                <span class="calculator-icon">⚡</span>
                Self-Stressing Bed Calculator
            </h3>

            <div class="calculator-inputs">
                <div class="input-group">
                    <label>Initial Pull (lbs/strand)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_InitialPull"
                                      Placeholder="0" Format="n0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Required Force (lbs)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_RequiredForce"
                                      Placeholder="0" Format="n0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>MOE (psi)</label>
                    <SfDropDownList TValue="double?" TItem="object" @bind-Value="@SS_MOE" DataSource="@MOEValues"
                                    Placeholder="Select MOE" @onchange="CalculateAll">
                        <DropDownListFieldSettings Text="Text" Value="Value" />
                    </SfDropDownList>
                </div>
                <div class="input-group">
                    <label>Number of Strands</label>
                    <SfNumericTextBox TValue="int?" @bind-Value="@SS_NumberOfStrands"
                                      Placeholder="0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Adj Bed Short (in)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_AdjBedShortening"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Block Length (ft)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_BlockLength"
                                      Placeholder="0" Format="n1" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Strand Size</label>
                    <SfDropDownList TValue="string" TItem="StrandSize" @bind-Value="@SS_StrandSize" DataSource="@StrandSizes"
                                    Placeholder="Select size" @onchange="OnStrandSizeChange">
                        <DropDownListFieldSettings Text="Name" Value="Name" />
                    </SfDropDownList>
                </div>
                <div class="input-group">
                    <label>Strand Area (in²)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_StrandArea"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Dead End Seat (in)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_DeadEndSeating"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Live End Seat (in)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@SS_LiveEndSeating"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
            </div>

            <!-- Self-Stressing Results -->
            <div class="calculator-results">
                <h4>Calculated Results</h4>
                <div class="results-grid">
                    <div class="result-item">
                        <label>Basic Elongation (in)</label>
                        <div class="result-value">@SS_BasicElongation.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Bed Shortening (in)</label>
                        <div class="result-value">@SS_BedShortening.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Total Elongation (in)</label>
                        <div class="result-value">@SS_TotalElongation.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Seating Loss (in)</label>
                        <div class="result-value">@SS_SeatingLoss.ToString("F3")</div>
                    </div>
                    <div class="result-item highlight">
                        <label>Desired Elongation (in)</label>
                        <div class="result-value">@SS_DesiredElongationRounded.ToString("F3")</div>
                    </div>
                    <div class="result-item highlight">
                        <label>Calculated Pull (lbs)</label>
                        <div class="result-value">@SS_CalculatedPullRounded.ToString("F0")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Non-Self-Stressing Calculator -->
        <div class="calculator-card non-self-stressing">
            <h3 class="calculator-title">
                <span class="calculator-icon">🔧</span>
                Non-Self-Stressing Bed Calculator
            </h3>

            <div class="calculator-inputs">
                <div class="input-group">
                    <label>Initial Pull (lbs/strand)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_InitialPull"
                                      Placeholder="0" Format="n0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>MOE (psi)</label>
                    <SfDropDownList TValue="double?" TItem="object" @bind-Value="@NSS_MOE" DataSource="@MOEValues"
                                    Placeholder="Select MOE" @onchange="CalculateAll">
                        <DropDownListFieldSettings Text="Text" Value="Value" />
                    </SfDropDownList>
                </div>
                <div class="input-group">
                    <label>Block Length (ft)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_BlockLength"
                                      Placeholder="0" Format="n1" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Strand Size</label>
                    <SfDropDownList TValue="string" TItem="StrandSize" @bind-Value="@NSS_StrandSize" DataSource="@StrandSizes"
                                    Placeholder="Select size" @onchange="OnStrandSizeChangeNSS">
                        <DropDownListFieldSettings Text="Name" Value="Name" />
                    </SfDropDownList>
                </div>
                <div class="input-group">
                    <label>Strand Area (in²)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_StrandArea"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Temp at Stressing (°F)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_TempAtStressing"
                                      Placeholder="0" Format="n0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Temp at Release (°F)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_TempAtRelease"
                                      Placeholder="0" Format="n0" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Dead End Seat (in)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_DeadEndSeating"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
                <div class="input-group">
                    <label>Live End Seat (in)</label>
                    <SfNumericTextBox TValue="double?" @bind-Value="@NSS_LiveEndSeating"
                                      Placeholder="0" Format="n3" @onchange="CalculateAll" />
                </div>
            </div>

            <!-- Non-Self-Stressing Results -->
            <div class="calculator-results">
                <h4>Calculated Results</h4>
                <div class="results-grid">
                    <div class="result-item">
                        <label>Basic Elongation (in)</label>
                        <div class="result-value">@NSS_BasicElongation.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Seating Loss (in)</label>
                        <div class="result-value">@NSS_SeatingLoss.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Temp Elongation (in)</label>
                        <div class="result-value">@NSS_TempElongation.ToString("F3")</div>
                    </div>
                    <div class="result-item">
                        <label>Temp Correction (in)</label>
                        <div class="result-value">@NSS_TempCorrection.ToString("F3")</div>
                    </div>
                    <div class="result-item highlight">
                        <label>Desired Elongation (in)</label>
                        <div class="result-value">@NSS_DesiredElongationRounded.ToString("F3")</div>
                    </div>
                    <div class="result-item highlight">
                        <label>Calculated Pull (lbs)</label>
                        <div class="result-value">@NSS_CalculatedPullRounded.ToString("F0")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast notification -->
<SfToast @ref="ToastObj" Width="400" Height="150" />

@code {
    [Parameter] public string BedId { get; set; } = "";
    [CascadingParameter] public MainLayout? Layout { get; set; }

    private SfToast? ToastObj;
    private BedInformation? BedInfo;
    private List<ACCProject> Projects = new();
    private List<ProjectMember> ProjectMembers = new();

    // Report Metadata
    private string ReportId = "";
    private string? SelectedProjectId;
    private string? ProjectNumber;
    private DateTime? ReportDate = DateTime.Now;
    private string? CalculatedBy;
    private string? ReviewedBy;
    private string? Location;
    private string? Notes;

    // Self-Stressing Inputs
    private double? SS_InitialPull;
    private double? SS_RequiredForce;
    private double? SS_MOE;
    private int? SS_NumberOfStrands;
    private double? SS_AdjBedShortening;
    private double? SS_BlockLength;
    private string? SS_StrandSize;
    private double? SS_StrandArea;
    private double? SS_DeadEndSeating;
    private double? SS_LiveEndSeating;

    // Self-Stressing Results
    private double SS_BasicElongation;
    private double SS_BedShortening;
    private double SS_TotalElongation;
    private double SS_SeatingLoss;
    private double SS_DesiredElongationRounded;
    private double SS_CalculatedPullRounded;

    // Non-Self-Stressing Inputs
    private double? NSS_InitialPull;
    private double? NSS_MOE;
    private double? NSS_BlockLength;
    private string? NSS_StrandSize;
    private double? NSS_StrandArea;
    private double? NSS_TempAtStressing;
    private double? NSS_TempAtRelease;
    private double? NSS_DeadEndSeating;
    private double? NSS_LiveEndSeating;

    // Non-Self-Stressing Results
    private double NSS_BasicElongation;
    private double NSS_SeatingLoss;
    private double NSS_TempElongation;
    private double NSS_TempCorrection;
    private double NSS_DesiredElongationRounded;
    private double NSS_CalculatedPullRounded;

    // UI State
    private bool CanSave => !string.IsNullOrEmpty(SelectedProjectId) &&
                           ReportDate.HasValue &&
                           !string.IsNullOrEmpty(CalculatedBy);
    private bool HasData => SS_InitialPull.HasValue || NSS_InitialPull.HasValue;

    // Lookup Data
    private List<object> MOEValues = new List<object>
    {
        new { Text = "28,500,000", Value = 28500000.0 },
        new { Text = "28,600,000", Value = 28600000.0 },
        new { Text = "28,700,000", Value = 28700000.0 },
        new { Text = "28,800,000", Value = 28800000.0 },
        new { Text = "28,900,000", Value = 28900000.0 },
        new { Text = "29,350,000", Value = 29350000.0 }
    };

    private List<StrandSize> StrandSizes = new List<StrandSize>
    {
        new StrandSize { Name = "3/8\" LL", Area = 0.085 },
        new StrandSize { Name = "1/2\" SP-LL", Area = 0.153 },
        new StrandSize { Name = "9/16\" LL", Area = 0.192 }
    };

    protected override async Task OnInitializedAsync()
    {
        // Generate Report ID
        ReportId = $"BQC-{DateTime.Now:yyyyMMdd}-{Guid.NewGuid().ToString()[..8].ToUpper()}";

        // Load bed information
        BedInfo = BedDatabase.GetBedById(BedId);

        // Load projects and team members
        try
        {
            Projects = await ACCService.GetProjectsAsync();
            var currentProject = await ACCService.GetCurrentProjectAsync();
            if (currentProject != null)
            {
                SelectedProjectId = currentProject.Id;
                ProjectNumber = currentProject.Name; // Or get project number from metadata
                ProjectMembers = await ACCService.GetProjectMembersAsync(currentProject.Id);
            }
        }
        catch (Exception ex)
        {
            await ShowToast($"Error loading project data: {ex.Message}", "error");
        }
    }

    private async Task OnProjectChange(ChangeEventArgs<string, ACCProject> args)
    {
        if (args.ItemData != null)
        {
            SelectedProjectId = args.Value;
            ProjectNumber = args.ItemData.Name;
            try
            {
                ProjectMembers = await ACCService.GetProjectMembersAsync(args.Value);
            }
            catch (Exception ex)
            {
                await ShowToast($"Error loading project members: {ex.Message}", "error");
            }
        }
    }

    private async Task OnStrandSizeChange(ChangeEventArgs<string> args)
    {
        var selectedStrand = StrandSizes.FirstOrDefault(s => s.Name == args.Value);
        if (selectedStrand != null)
        {
            SS_StrandArea = selectedStrand.Area;
            await CalculateAll();
        }
    }

    private async Task OnStrandSizeChangeNSS(ChangeEventArgs<string> args)
    {
        var selectedStrand = StrandSizes.FirstOrDefault(s => s.Name == args.Value);
        if (selectedStrand != null)
        {
            NSS_StrandArea = selectedStrand.Area;
            await CalculateAll();
        }
    }

    private async Task CalculateAll()
    {
        CalculateSelfStressing();
        CalculateNonSelfStressing();
        await Task.CompletedTask;
    }

    private void CalculateSelfStressing()
    {
        if (!SS_InitialPull.HasValue || !SS_MOE.HasValue || !SS_BlockLength.HasValue || !SS_StrandArea.HasValue)
            return;

        try
        {
            double blockLengthInches = SS_BlockLength.Value * 12; // Convert ft to inches

            // Basic Elongation = (Initial Pull * Block Length) / (MOE * Strand Area)
            SS_BasicElongation = (SS_InitialPull.Value * blockLengthInches) / (SS_MOE.Value * SS_StrandArea.Value);

            // Bed Shortening calculation (if applicable)
            SS_BedShortening = SS_AdjBedShortening ?? 0;

            // Total Elongation
            SS_TotalElongation = SS_BasicElongation + SS_BedShortening;

            // Seating Loss calculation
            double deadEndLoss = SS_DeadEndSeating ?? 0;
            double liveEndLoss = SS_LiveEndSeating ?? 0;
            SS_SeatingLoss = deadEndLoss + liveEndLoss;

            // Desired Elongation (rounded to 1/8")
            double desiredElongation = SS_TotalElongation + SS_SeatingLoss;
            SS_DesiredElongationRounded = Math.Round(desiredElongation * 8) / 8;

            // Back-calculate the required pull for the rounded elongation
            if (SS_NumberOfStrands.HasValue && SS_NumberOfStrands > 0)
            {
                double requiredElongationForPull = SS_DesiredElongationRounded - SS_BedShortening - SS_SeatingLoss;
                SS_CalculatedPullRounded = Math.Round((requiredElongationForPull * SS_MOE.Value * SS_StrandArea.Value) / blockLengthInches);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in self-stressing calculation: {ex.Message}");
        }
    }

    private void CalculateNonSelfStressing()
    {
        if (!NSS_InitialPull.HasValue || !NSS_MOE.HasValue || !NSS_BlockLength.HasValue || !NSS_StrandArea.HasValue)
            return;

        try
        {
            double blockLengthInches = NSS_BlockLength.Value * 12; // Convert ft to inches

            // Basic Elongation = (Initial Pull * Block Length) / (MOE * Strand Area)
            NSS_BasicElongation = (NSS_InitialPull.Value * blockLengthInches) / (NSS_MOE.Value * NSS_StrandArea.Value);

            // Seating Loss calculation
            double deadEndLoss = NSS_DeadEndSeating ?? 0;
            double liveEndLoss = NSS_LiveEndSeating ?? 0;
            NSS_SeatingLoss = deadEndLoss + liveEndLoss;

            // Temperature elongation calculation
            if (NSS_TempAtStressing.HasValue && NSS_TempAtRelease.HasValue)
            {
                double tempDifference = NSS_TempAtRelease.Value - NSS_TempAtStressing.Value;
                double coefficientOfExpansion = 6.5e-6; // per °F for steel
                NSS_TempElongation = coefficientOfExpansion * tempDifference * blockLengthInches;
                NSS_TempCorrection = NSS_TempElongation;
            }

            // Desired Elongation (rounded to 1/8")
            double desiredElongation = NSS_BasicElongation + NSS_SeatingLoss + NSS_TempCorrection;
            NSS_DesiredElongationRounded = Math.Round(desiredElongation * 8) / 8;

            // Back-calculate the required pull for the rounded elongation
            double requiredElongationForPull = NSS_DesiredElongationRounded - NSS_SeatingLoss - NSS_TempCorrection;
            NSS_CalculatedPullRounded = Math.Round((requiredElongationForPull * NSS_MOE.Value * NSS_StrandArea.Value) / blockLengthInches);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in non-self-stressing calculation: {ex.Message}");
        }
    }

    private async Task SaveReport()
    {
        if (!CanSave) return;

        try
        {
            // Create report data object
            var reportData = new
            {
                ReportId,
                BedId,
                SelectedProjectId,
                ProjectNumber,
                ReportDate,
                CalculatedBy,
                ReviewedBy,
                Location,
                Notes,
                SelfStressingData = new
                {
                    SS_InitialPull,
                    SS_RequiredForce,
                    SS_MOE,
                    SS_NumberOfStrands,
                    SS_AdjBedShortening,
                    SS_BlockLength,
                    SS_StrandSize,
                    SS_StrandArea,
                    SS_DeadEndSeating,
                    SS_LiveEndSeating,
                    SS_BasicElongation,
                    SS_BedShortening,
                    SS_TotalElongation,
                    SS_SeatingLoss,
                    SS_DesiredElongationRounded,
                    SS_CalculatedPullRounded
                },
                NonSelfStressingData = new
                {
                    NSS_InitialPull,
                    NSS_MOE,
                    NSS_BlockLength,
                    NSS_StrandSize,
                    NSS_StrandArea,
                    NSS_TempAtStressing,
                    NSS_TempAtRelease,
                    NSS_DeadEndSeating,
                    NSS_LiveEndSeating,
                    NSS_BasicElongation,
                    NSS_SeatingLoss,
                    NSS_TempElongation,
                    NSS_TempCorrection,
                    NSS_DesiredElongationRounded,
                    NSS_CalculatedPullRounded
                }
            };

            // Save to ACC/OSS storage
            await StorageService.SaveQCReportAsync(SelectedProjectId!, ReportId, reportData);
            await ShowToast("Report saved successfully to ACC!", "success");
        }
        catch (Exception ex)
        {
            await ShowToast($"Error saving report: {ex.Message}", "error");
        }
    }

    private async Task ExportPDF()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("window.print");
        }
        catch (Exception ex)
        {
            await ShowToast($"Error exporting PDF: {ex.Message}", "error");
        }
    }

    private void CloseReport()
    {
        Navigation.NavigateTo("/quality");
    }

    private async Task ShowToast(string message, string type = "info")
    {
        if (ToastObj != null)
        {
            var cssClass = type switch
            {
                "success" => "e-toast-success",
                "error" => "e-toast-danger",
                "warning" => "e-toast-warning",
                _ => "e-toast-info"
            };

            await ToastObj.ShowAsync(new ToastModel
            {
                Content = message,
                CssClass = cssClass,
                Timeout = 3000
            });
        }
    }

    public class StrandSize
    {
        public string Name { get; set; } = "";
        public double Area { get; set; }
    }
}