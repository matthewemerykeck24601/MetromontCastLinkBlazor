@page "/"
@using MetromontCastLink.Shared.Models
@using Syncfusion.Blazor.Charts
@inject NavigationManager Navigation
@inject IACCService ACCService

<PageTitle>Home - Metromont CastLink</PageTitle>

<div class="home-page">
    <!-- Welcome Section -->
    <div class="welcome-section">
        <div class="welcome-content">
            <div class="welcome-text">
                <h1>Welcome to CastLink</h1>
                <p>Integrated precast concrete manufacturing management platform</p>
                @if (IsAuthenticated)
                {
                    <p class="user-greeting">Hello, @UserName! You have access to @ProjectCount projects.</p>
                }
            </div>
            <div class="welcome-actions">
                @if (!IsAuthenticated)
                {
                    <SfButton CssClass="e-primary e-large" @onclick="ConnectToACC">
                        Connect to Autodesk Construction Cloud
                    </SfButton>
                }
                else
                {
                    <ACCProjectSelector @bind-SelectedProjectId="@CurrentProjectId" 
                        ShowProjectInfo="true" 
                        Label="Active Project" />
                }
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="quick-actions">
        <h2>Quick Actions</h2>
        <div class="actions-grid">
            <div class="action-card" @onclick="() => NavigateTo('/quality/bed-report-selection')">
                <div class="action-icon quality">
                    <span class="e-icons e-quality"></span>
                </div>
                <span>New QC Report</span>
            </div>
            <div class="action-card" @onclick="() => NavigateTo('/engineering/calculator')">
                <div class="action-icon engineering">
                    <span class="e-icons e-calculator"></span>
                </div>
                <span>Design Calculator</span>
            </div>
            <div class="action-card" @onclick="() => NavigateTo('/engineering/viewer')">
                <div class="action-icon model">
                    <span class="e-icons e-3d-model"></span>
                </div>
                <span>View Models</span>
            </div>
            <div class="action-card" @onclick="() => NavigateTo('/production/scheduling')">
                <div class="action-icon production">
                    <span class="e-icons e-calendar"></span>
                </div>
                <span>Production Schedule</span>
            </div>
        </div>
    </div>

    <!-- Dashboard Grid -->
    <div class="dashboard-grid">
        <!-- Module Status -->
        <div class="dashboard-card">
            <h3>Module Status</h3>
            <div class="module-list">
                <div class="module-item">
                    <div class="module-info">
                        <span class="module-icon quality">
                            <span class="e-icons e-quality"></span>
                        </span>
                        <div>
                            <h4>Quality Control</h4>
                            <p>Bed QC Reports & Inspections</p>
                        </div>
                    </div>
                    <SfChip>
                        <ChipItems>
                            <ChipItem Text="Active" CssClass="status-active" />
                        </ChipItems>
                    </SfChip>
                </div>
                <div class="module-item">
                    <div class="module-info">
                        <span class="module-icon engineering">
                            <span class="e-icons e-engineering"></span>
                        </span>
                        <div>
                            <h4>Engineering</h4>
                            <p>Design tools & calculations</p>
                        </div>
                    </div>
                    <SfChip>
                        <ChipItems>
                            <ChipItem Text="Active" CssClass="status-active" />
                        </ChipItems>
                    </SfChip>
                </div>
                <div class="module-item">
                    <div class="module-info">
                        <span class="module-icon production">
                            <span class="e-icons e-production"></span>
                        </span>
                        <div>
                            <h4>Production</h4>
                            <p>Scheduling & bed management</p>
                        </div>
                    </div>
                    <SfChip>
                        <ChipItems>
                            <ChipItem Text="Development" CssClass="status-development" />
                        </ChipItems>
                    </SfChip>
                </div>
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="dashboard-card">
            <h3>Recent Activity</h3>
            <div class="activity-timeline">
                @if (RecentActivities.Any())
                {
                    @foreach (var activity in RecentActivities.Take(5))
                    {
                        <div class="timeline-item">
                            <div class="timeline-dot @activity.Type"></div>
                            <div class="timeline-content">
                                <p>@activity.Description</p>
                                <span class="timeline-time">@GetRelativeTime(activity.Timestamp)</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="no-activity">No recent activity to display</p>
                }
            </div>
        </div>

        <!-- Statistics Chart -->
        <div class="dashboard-card chart-card">
            <h3>Weekly Statistics</h3>
            <SfChart Height="300px">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                </ChartPrimaryXAxis>
                <ChartPrimaryYAxis>
                    <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                    <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                </ChartPrimaryYAxis>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@ChartData" Name="QC Reports" XName="Day" YName="Reports" Type="ChartSeriesType.Column">
                        <ChartSeriesAnimation Enable="true" Duration="1000"></ChartSeriesAnimation>
                    </ChartSeries>
                    <ChartSeries DataSource="@ChartData" Name="Calculations" XName="Day" YName="Calculations" Type="ChartSeriesType.Line">
                        <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
                <ChartLegendSettings Visible="true" Position="LegendPosition.Top"></ChartLegendSettings>
            </SfChart>
        </div>
    </div>

    <!-- Platform Features -->
    <div class="features-section">
        <h2>Platform Features</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">
                    <span class="e-icons e-cloud"></span>
                </div>
                <h4>ACC Integration</h4>
                <p>Seamless connection with Autodesk Construction Cloud for project data and model access.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">
                    <span class="e-icons e-shield"></span>
                </div>
                <h4>Secure Storage</h4>
                <p>OSS backend with encrypted storage for all your quality reports and calculations.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">
                    <span class="e-icons e-mobile"></span>
                </div>
                <h4>Mobile Ready</h4>
                <p>Responsive design works on tablets and mobile devices for field operations.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">
                    <span class="e-icons e-analytics"></span>
                </div>
                <h4>Real-time Analytics</h4>
                <p>Track production metrics and quality trends with interactive dashboards.</p>
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsAuthenticated { get; set; }
    private string UserName { get; set; } = "User";
    private int ProjectCount { get; set; }
    private string? CurrentProjectId { get; set; }
    private List<Activity> RecentActivities = new();
    private List<ChartDataPoint> ChartData = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthentication();
        await LoadDashboardData();
        GenerateChartData();
    }

    private async Task CheckAuthentication()
    {
        IsAuthenticated = await ACCService.IsAuthenticatedAsync();
        if (IsAuthenticated)
        {
            var userProfile = await ACCService.GetUserProfileAsync();
            if (userProfile != null)
            {
                UserName = userProfile.Name.Split(' ').FirstOrDefault() ?? "User";
            }

            var projects = await ACCService.GetProjectsAsync();
            ProjectCount = projects.Count;
        }
    }

    private async Task LoadDashboardData()
    {
        // This would load from your storage service
        // For demo, using sample data
        RecentActivities = new List<Activity>
        {
            new Activity
            {
                Type = "report",
                Description = "Bed QC Report created for Flat Bed #1",
                Timestamp = DateTime.Now.AddHours(-2)
            },
            new Activity
            {
                Type = "calculation",
                Description = "Beam design calculation completed",
                Timestamp = DateTime.Now.AddHours(-5)
            },
            new Activity
            {
                Type = "model",
                Description = "3D model viewed: Building A - Level 2",
                Timestamp = DateTime.Now.AddDays(-1)
            }
        };
    }

    private void GenerateChartData()
    {
        var days = new[] { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
        var random = new Random();
        
        ChartData = days.Select(day => new ChartDataPoint
        {
            Day = day,
            Reports = random.Next(2, 8),
            Calculations = random.Next(3, 12)
        }).ToList();
    }

    private async Task ConnectToACC()
    {
        await ACCService.InitiateAuthenticationAsync();
    }

    private void NavigateTo(string path)
    {
        Navigation.NavigateTo(path);
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.Now - timestamp;
        
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        
        return timestamp.ToString("MMM dd");
    }

    private class Activity
    {
        public string Type { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    private class ChartDataPoint
    {
        public string Day { get; set; } = "";
        public int Reports { get; set; }
        public int Calculations { get; set; }
    }
}
